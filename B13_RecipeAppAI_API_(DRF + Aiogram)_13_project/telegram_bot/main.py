import asyncio
import logging

from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage  # –ø—Ä–æ—Å—Ç–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è FSM

from config.config import Config, load_config
from keyboards.main_menu import set_main_menu
from handlers.user import user_router
from handlers.generate import generate_router
# –õ–æ–≥–≥–µ—Ä
logger = logging.getLogger(__name__)


async def main():
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    logging.basicConfig(
        level=logging.INFO,
        format="%(filename)s:%(lineno)d #%(levelname)-8s "
               "[%(asctime)s] - %(name)s - %(message)s"
    )
    logger.info("üöÄ Starting bot...")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥
    config: Config = load_config()

    # –•—Ä–∞–Ω–∏–ª–∏—â–µ (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ RedisStorage –∏–ª–∏ –¥—Ä—É–≥–æ–µ)
    storage = MemoryStorage()

    # –ë–æ—Ç –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
    bot = Bot(
        token=config.bot.token,
        default=DefaultBotProperties(parse_mode=ParseMode.HTML),
    )
    dp = Dispatcher(storage=storage)

    # –¢—É—Ç –º–æ–∂–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ —Å–µ—Ä–≤–∏—Å—ã (–ë–î, Redis –∏ —Ç.–¥.)
    dp.workflow_data.update({
        "config": config,
    })

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–µ–Ω—é
    await set_main_menu(bot,language="ru")

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä—ã
    logger.info("üîó –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä—ã...")
    dp.include_router(user_router)
    dp.include_router(generate_router)

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º middlewares (–µ—Å–ª–∏ –µ—Å—Ç—å)
    logger.info("‚ö° –ü–æ–¥–∫–ª—é—á–∞–µ–º –º–∏–¥–¥–ª–≤–∞—Ä–∏...")

    # –£–±–∏—Ä–∞–µ–º –≤–µ–±—Ö—É–∫–∏, –µ—Å–ª–∏ –±—ã–ª–∏, –∏ —Å—Ç–∞—Ä—Ç—É–µ–º polling
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("‚ùå Bot stopped!")
