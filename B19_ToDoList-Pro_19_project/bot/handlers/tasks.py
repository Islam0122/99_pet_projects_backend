from aiogram import Router, types, F
from keyboards.inline_keyboards import return_menu_kb, tasks_inline_kb,tasks2_inline_kb
from api.tasks import get_tasks_by_telegram_id, get_task_by_id, delete_task, mark_task_done
from api.telegramusers import get_telegram_user,mark_task_done_and_update_user
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from dialogs.add_task_dialog import AddTaskSG

tasks_router = Router()


@tasks_router.callback_query(lambda c: c.data == "my_tasks")
async def show_my_tasks(callback: types.CallbackQuery):
    tg_id = callback.from_user.id
    tasks = await get_tasks_by_telegram_id(tg_id)

    if not tasks or all(t["done"] for t in tasks):
        await callback.message.edit_text(text="üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á.",reply_markup=return_menu_kb())
        return

    kb = tasks_inline_kb(tasks)
    await callback.message.edit_text(text="üìù –í–∞—à–∏ –∑–∞–¥–∞—á–∏:", reply_markup=kb)


@tasks_router.callback_query(lambda c: c.data == "old_tasks")
async def show_old_tasks(callback: types.CallbackQuery):
    tg_id = callback.from_user.id
    tasks = await get_tasks_by_telegram_id(tg_id)
    done_tasks = [t for t in tasks if t.get("done")]

    if not done_tasks:
        await callback.message.edit_text(
            text="üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á.",
            reply_markup=return_menu_kb()
        )
        return

    kb = tasks2_inline_kb(done_tasks)
    await callback.message.edit_text(
        text="üìù –í–∞—à–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:",
        reply_markup=kb
    )


@tasks_router.callback_query(lambda c: c.data.startswith("task_"))
async def task_actions(callback: types.CallbackQuery):
    task_id = int(callback.data.split("_")[1])
    task = await get_task_by_id(task_id)

    if not task:
        await callback.message.answer("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    status = "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∞" if task["done"] else "‚ùå –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞"
    due = task.get("due_date_formatted") or "–Ω–µ—Ç"

    categories = ", ".join([c["name"] for c in task.get("categories", [])]) or "–ù–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π"

    text = (
        f"‚ö° –ó–∞–¥–∞—á–∞ ID {task_id}\n\n"
        f"üìå –ù–∞–∑–≤–∞–Ω–∏–µ: {task['title']}\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {task.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}\n"
        f"üè∑ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {categories}\n"
        f"‚è∞ –°—Ä–æ–∫: {due}\n"
        f"üïí –°–æ–∑–¥–∞–Ω–æ: {task.get('created_at', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}\n"
        f"–°—Ç–∞—Ç—É—Å: {status}"
    )

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data=f"done_{task_id}"),
        ],
        [
            InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{task_id}"),
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="my_tasks")
        ]
    ])

    await callback.message.edit_text(text=text, reply_markup=kb)


@tasks_router.callback_query(lambda c: c.data.startswith("delete_"))
async def delete_task_callback(callback: types.CallbackQuery):
    task_id = int(callback.data.split("_")[1])
    await delete_task(task_id)
    await callback.message.edit_text(text=f"üóë –ó–∞–¥–∞—á–∞ ID {task_id} —É–¥–∞–ª–µ–Ω–∞.",reply_markup=return_menu_kb())


@tasks_router.callback_query(lambda c: c.data.startswith("done_"))
async def mark_done_callback(callback: types.CallbackQuery):
    task_id = int(callback.data.split("_")[1])
    await mark_task_done(task_id)
    user_data = await get_telegram_user(callback.from_user.id)
    user_stats = await mark_task_done_and_update_user(user_data['id'])

    await callback.message.edit_text(
        text=(
            f"‚úÖ –ó–∞–¥–∞—á–∞ ID {task_id} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!\n\n"
            f"–í—Å–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {user_stats['total_task_completes']}\n"
            f"Streak –¥–Ω–µ–π: {user_stats['streak_days']}"
        ),
        reply_markup=return_menu_kb()
    )


@tasks_router.callback_query(lambda c: c.data == "add_task")
async def add_tasks(callback: types.CallbackQuery):
    await callback.message.edit_text(
        text="‚úèÔ∏è –ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É, –Ω–∞–ø–∏—à–∏—Ç–µ /add –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
        reply_markup=return_menu_kb()
    )
    await callback.answer()

