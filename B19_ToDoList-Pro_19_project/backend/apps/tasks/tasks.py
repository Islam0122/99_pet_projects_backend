from celery import shared_task
from django.utils import timezone
from .models import Task
from django.conf import settings
import requests

@shared_task
def send_task_reminders():
    now = timezone.now()

    new_tasks = Task.objects.filter(done=False, created_reminder_sent=False)
    for task in new_tasks:
        if task.owner.telegram_id:
            message = (
                f"‚úÖ –¢–≤–æ—è –∑–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞!\n"
                f"–ó–∞–¥–∞—á–∞: {task.title}\n"
                f"–û–ø–∏—Å–∞–Ω–∏–µ: {task.description or '‚Äî'}\n"
                f"–î–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {task.due_date.strftime('%d.%m.%Y %H:%M') if task.due_date else '‚Äî'}"
            )
            url = f"https://api.telegram.org/bot{settings.TELEGRAM_BOT_TOKEN}/sendMessage"
            try:
                requests.post(url, data={"chat_id": task.owner.telegram_id, "text": message})
                task.created_reminder_sent = True
                task.save(update_fields=["created_reminder_sent"])
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –æ —Å–æ–∑–¥–∞–Ω–∏–∏: {e}")

    reminder_time = now + timezone.timedelta(minutes=15)
    due_tasks = Task.objects.filter(
        done=False,
        due_date__gte=now,
        due_date__lte=reminder_time,
        due_reminder_sent=False
    )
    for task in due_tasks:
        if task.owner.telegram_id:
            message = (
                f"‚ö° –í–Ω–∏–º–∞–Ω–∏–µ! –¢–≤–æ—è –∑–∞–¥–∞—á–∞ —Å–∫–æ—Ä–æ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è!\n"
                f"–ó–∞–¥–∞—á–∞: {task.title}\n"
                f"–û–ø–∏—Å–∞–Ω–∏–µ: {task.description or '‚Äî'}\n"
                f"–î–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {task.due_date.strftime('%d.%m.%Y %H:%M')}"
            )
            url = f"https://api.telegram.org/bot{settings.TELEGRAM_BOT_TOKEN}/sendMessage"
            try:
                requests.post(url, data={"chat_id": task.owner.telegram_id, "text": message})
                task.due_reminder_sent = True
                task.save(update_fields=["due_reminder_sent"])
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –æ –¥–µ–¥–ª–∞–π–Ω–µ: {e}")


@shared_task
def remind_unfinished_tasks():
    now = timezone.now()
    tasks = Task.objects.filter(
        done=False,
        due_date__gte=now,
    )

    for task in tasks:
        if task.owner.telegram_id:
            message = (
                f"üïì –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!\n"
                f"–¢—ã –µ—â—ë –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª –∑–∞–¥–∞—á—É:\n\n"
                f"üìå {task.title}\n"
                f"–û–ø–∏—Å–∞–Ω–∏–µ: {task.description or '‚Äî'}\n"
                f"–î–µ–¥–ª–∞–π–Ω: {task.due_date.strftime('%d.%m.%Y %H:%M') if task.due_date else '‚Äî'}"
            )

            url = f"https://api.telegram.org/bot{settings.TELEGRAM_BOT_TOKEN}/sendMessage"
            try:
                requests.post(url, data={"chat_id": task.owner.telegram_id, "text": message})
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
