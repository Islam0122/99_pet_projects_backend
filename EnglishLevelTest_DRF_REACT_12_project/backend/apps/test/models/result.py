from django.db import models
from django.db.models.signals import post_save
from django.dispatch import receiver
from io import BytesIO
from django.core.files.base import ContentFile
from django.template.loader import render_to_string
from django.core.mail import EmailMessage
from django.conf import settings
import logging
from weasyprint import HTML
import os
from  .basemodel import  BaseModel
from .test import Test

logger = logging.getLogger(__name__)

# ===========================
# –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞ + –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
# ===========================
class ResultsTest(BaseModel):
    test = models.ForeignKey(
        Test,
        on_delete=models.CASCADE,
        related_name='results',
        verbose_name='–¢–µ—Å—Ç',
        help_text='–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ—à—ë–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
    )
    name = models.CharField(max_length=255, verbose_name='–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', help_text='–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞')
    email = models.EmailField(verbose_name='Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', help_text='Email –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞')
    score = models.PositiveIntegerField(verbose_name='–ù–∞–±—Ä–∞–Ω–Ω—ã–µ –±–∞–ª–ª—ã')
    total_questions = models.PositiveIntegerField(verbose_name='–í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤')
    correct_answers = models.PositiveIntegerField(verbose_name='–ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã')
    wrong_answers = models.PositiveIntegerField(verbose_name='–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã')
    percentage = models.DecimalField(max_digits=5, decimal_places=2, verbose_name='–ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤')
    certificate = models.FileField(upload_to='certificates/', blank=True, null=True, verbose_name='–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç (PDF)')

    def __str__(self):
        return f"–†–µ–∑—É–ª—å—Ç–∞—Ç '{self.test.name}' ‚Äî {self.name} ({self.email})"

    class Meta:
        verbose_name = '–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞'
        verbose_name_plural = '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤'
        ordering = ['-created_at']

# ===========================
# –°–∏–≥–Ω–∞–ª –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞
# ===========================
@receiver(post_save, sender=ResultsTest)
def generate_certificate_and_send_email(sender, instance, created, **kwargs):
    if created and not instance.certificate:
        context = {
            'name': instance.name,
            'topic': instance.test.name,
            'level': instance.test.level,
            'percentage': instance.percentage,
            'correct_answers': instance.correct_answers,
            'total_questions': instance.total_questions,
            'date': instance.created_at.strftime('%d-%m-%Y'),
        }

        html_string = render_to_string("certificate_template.html", context)

        pdf_file = BytesIO()
        base_url = f'file://{os.path.join(settings.BASE_DIR, "core", "static")}/'
        HTML(string=html_string, base_url=base_url).write_pdf(pdf_file)

        pdf_file.seek(0)
        filename = f"certificate_{instance.id}.pdf"
        pdf_content = pdf_file.read()
        instance.certificate.save(filename, ContentFile(pdf_content))

        email_subject = 'üéì –í–∞—à —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –∑–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞ –ø–æ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º—É'
        email_body = f"""
–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {instance.name}!

–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å —É—Å–ø–µ—à–Ω—ã–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º —Ç–µ—Å—Ç–∞ –ø–æ —Ç–µ–º–µ "{instance.test.name}" ({instance.test.level})! üéâ

–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:
- –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {instance.correct_answers}
- –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {instance.wrong_answers}
- –ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {instance.percentage}%

–í–∞—à —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω –∫ –ø–∏—Å—å–º—É. –°–∫–∞—á–∞–π—Ç–µ –µ–≥–æ –∏ —Å–æ—Ö—Ä–∞–Ω—è–π—Ç–µ!

–° —É–≤–∞–∂–µ–Ω–∏–µ–º,
–ö–æ–º–∞–Ω–¥–∞ –æ–±—É—á–µ–Ω–∏—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–º—É üåü
"""
        try:
            email = EmailMessage(
                subject=email_subject,
                body=email_body,
                from_email=settings.EMAIL_HOST_USER,
                to=[instance.email],
            )
            email.attach(filename, pdf_content, 'application/pdf')
            email.send()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å—å–º–∞: {e}")

        pdf_file.close()
