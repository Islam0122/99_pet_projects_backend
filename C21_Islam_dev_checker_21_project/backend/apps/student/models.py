from django.db import models


class Group(models.Model):
    title = models.CharField(
        max_length=100,
        verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã",
        help_text="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—á–µ–±–Ω–æ–π –≥—Ä—É–ø–ø—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: Python 101)",
    )
    description = models.TextField(
        blank=True,
        null=True,
        verbose_name="–û–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã",
        help_text="–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–ø–ø–µ",
    )
    telegram_id = models.CharField(
        max_length=50,
        unique=True,
        verbose_name="ID Telegram-–≥—Ä—É–ø–ø—ã",
        help_text="–í–≤–µ–¥–∏—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π Telegram ID –≥—Ä—É–ø–ø—ã",
    )

    def __str__(self):
        return self.title

    class Meta:
        verbose_name = "–ì—Ä—É–ø–ø–∞"
        verbose_name_plural = "–ì—Ä—É–ø–ø—ã"
        ordering = ["title"]


class Student(models.Model):
    full_name = models.CharField(
        max_length=100,
        verbose_name="–ü–æ–ª–Ω–æ–µ –∏–º—è",
        help_text="–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é —Å—Ç—É–¥–µ–Ω—Ç–∞",
    )
    username = models.CharField(
        max_length=50,
        blank=True,
        null=True,
        verbose_name="–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram",
        help_text="–£–∫–∞–∂–∏—Ç–µ Telegram username (–±–µ–∑ @), –µ—Å–ª–∏ –µ—Å—Ç—å",
    )
    telegram_id = models.CharField(
        max_length=50,
        unique=True,
        verbose_name="ID Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        help_text="–í–≤–µ–¥–∏—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π Telegram ID —Å—Ç—É–¥–µ–Ω—Ç–∞",
    )
    group = models.ForeignKey(
        "Group",
        on_delete=models.CASCADE,
        related_name="students",
        verbose_name="–ì—Ä—É–ø–ø–∞",
        help_text="–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É, –≤ –∫–æ—Ç–æ—Ä–æ–π —É—á–∏—Ç—Å—è —Å—Ç—É–¥–µ–Ω—Ç",
    )

    total_homeworks = models.PositiveIntegerField(
        default=0,
        verbose_name="–í—Å–µ–≥–æ –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π",
    )
    completed_homeworks = models.PositiveIntegerField(
        default=0,
        verbose_name="–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è",
    )
    last_homework_done = models.DateTimeField(
        blank=True,
        null=True,
        verbose_name="–ü–æ—Å–ª–µ–¥–Ω–µ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ",
    )
    average_score = models.FloatField(
        default=0.0,
        verbose_name="–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª",
    )
    best_score = models.FloatField(
        default=0.0,
        verbose_name="–õ—É—á—à–∏–π –±–∞–ª–ª",
    )
    total_points = models.FloatField(
        default=0.0,
        verbose_name="–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤",
    )
    rank = models.PositiveIntegerField(
        default=0,
        verbose_name="–†–µ–π—Ç–∏–Ω–≥ –≤ –≥—Ä—É–ø–ø–µ",
    )
    progress_level = models.CharField(
        max_length=50,
        default="–ù–æ–≤–∏—á–æ–∫",
        verbose_name="–£—Ä–æ–≤–µ–Ω—å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞",
    )
    is_active = models.BooleanField(
        default=True,
        verbose_name="–ê–∫—Ç–∏–≤–µ–Ω",
    )

    # ---------- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã ----------
    def calculate_progress_level(self) -> str:
        points = self.total_points  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –æ—á–∫–∏

        if points < 200:
            self.progress_level = "üë∂ –ù–æ–≤–∏—á–æ–∫"
        elif points < 300:
            self.progress_level = "üìò –ù–∞—á–∏–Ω–∞—é—â–∏–π"
        elif points < 500:
            self.progress_level = "‚ö° –°—Ä–µ–¥–Ω–∏–π"
        elif points < 700:
            self.progress_level = "üî• –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π"
        else:
            self.progress_level = "üí´ –õ–∏–¥–µ—Ä"

    def calculate_scores(self, homeworks):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å—Ç—É–¥–µ–Ω—Ç–∞ –ø–æ —Å–ø–∏—Å–∫—É –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π"""
        self.total_homeworks = homeworks.count()
        checked_homeworks = homeworks.filter(is_checked=True)

        self.completed_homeworks = checked_homeworks.count()
        self.total_points = sum(hw.grade or 0 for hw in checked_homeworks)
        self.average_score = (
            self.total_points / self.completed_homeworks if self.completed_homeworks else 0.0
        )
        self.best_score = max((hw.grade or 0 for hw in checked_homeworks), default=0)
        self.progress_level = self.calculate_progress_level()

    # ---------- –ú–µ—Ç–æ–¥—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ----------
    def update_progress(self, month):
        """–ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å—Ç—É–¥–µ–Ω—Ç–∞ —Å—Ä–∞–∑—É –ø–æ –≤—Å–µ–º –º–µ—Å—è—Ü–∞–º (Duolingo-—Å—Ç–∏–ª—å)"""
        all_homeworks = []

        # === Month 1 ===
        # ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ
        for hw in self.month1_homeworks.all():
            checked_items = hw.items.filter(is_checked=True)
            all_homeworks += list(checked_items)

        # === Month 2 ===
        all_homeworks += list(self.month2_homeworks.filter(is_checked=True))  # ‚úÖ –µ—Å—Ç—å –ø–æ–ª–µ

        # === Month 3 ===
        all_homeworks += list(self.month3_homeworks.filter(is_checked=True))  # ‚úÖ –µ—Å—Ç—å –ø–æ–ª–µ

        self.total_homeworks = (
                self.month1_homeworks.count() +
                self.month2_homeworks.count() +
                self.month3_homeworks.count()
        )

        self.completed_homeworks = len(all_homeworks)
        self.total_points = sum(getattr(hw, "grade", 0) or 0 for hw in all_homeworks)
        self.average_score = (
            self.total_points / self.completed_homeworks if self.completed_homeworks else 0.0
        )
        self.best_score = max(
            ((getattr(hw, "grade", 0) or 0) for hw in all_homeworks),
            default=0
        )

        # –ü—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∫ –ø—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        if self.total_homeworks == 0:
            self.progress_level = "–ù–æ–≤–∏—á–æ–∫"
        else:
            points = self.total_points  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –æ—á–∫–∏

            if points < 200:
                self.progress_level = "üë∂ –ù–æ–≤–∏—á–æ–∫"
            elif points < 300:
                self.progress_level = "üìò –ù–∞—á–∏–Ω–∞—é—â–∏–π"
            elif points < 500:
                self.progress_level = "‚ö° –°—Ä–µ–¥–Ω–∏–π"
            elif points < 700:
                self.progress_level = "üî• –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π"
            else:
                self.progress_level = "üí´ –õ–∏–¥–µ—Ä"

        super(Student, self).save(update_fields=[
            "total_homeworks",
            "completed_homeworks",
            "total_points",
            "average_score",
            "best_score",
            "progress_level",
        ])

    # ---------- –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ save ----------
    def save(self, *args, **kwargs):
        # –ü–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        self.progress_level = self.calculate_progress_level()

        # –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª
        if self.completed_homeworks > 0:
            self.average_score = self.total_points / self.completed_homeworks
        else:
            self.average_score = 0.0

        # –õ—É—á—à–∏–π –±–∞–ª–ª - —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–±—ä–µ–∫—Ç —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω
        if self.pk:  # ‚Üê –î–û–ë–ê–í–¨–¢–ï –≠–¢–£ –ü–†–û–í–ï–†–ö–£
            related_homeworks = []
            for month in range(1, 13):
                relation = f"month{month}_homeworks"
                if hasattr(self, relation):
                    try:
                        related_homeworks += list(getattr(self, relation).filter(is_checked=True))
                    except ValueError:
                        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –µ—Å–ª–∏ –æ–±—ä–µ–∫—Ç –µ—â–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω
                        continue

            if related_homeworks:
                self.best_score = max(hw.grade or 0 for hw in related_homeworks)
            else:
                self.best_score = 0.0
        else:
            # –î–ª—è –Ω–æ–≤—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º best_score –≤ 0
            self.best_score = 0.0

        super().save(*args, **kwargs)

        # –ü–µ—Ä–µ—Å—á—ë—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞ –≤ –≥—Ä—É–ø–ø–µ (—ç—Ç–æ—Ç –∫–æ–¥ –æ—Å—Ç–∞–µ—Ç—Å—è, –æ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è)
        students_in_group = list(
            Student.objects.filter(group=self.group).order_by("-total_points", "full_name")
        )
        for idx, student in enumerate(students_in_group, start=1):
            if student.rank != idx:
                Student.objects.filter(pk=student.pk).update(rank=idx)
    def __str__(self):
        return f"{self.full_name} ({self.group.title})"

    class Meta:
        verbose_name = "–°—Ç—É–¥–µ–Ω—Ç"
        verbose_name_plural = "–°—Ç—É–¥–µ–Ω—Ç—ã"
        ordering = ["full_name"]

