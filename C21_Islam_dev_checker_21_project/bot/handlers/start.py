from aiogram import Router, types, Bot,F
from aiogram.filters import Command
from external_services.api_client_user import StudentAPI, GroupsAPI
from keyboards.inline_keyboards import get_main_menu,get_teacher_account,return_menu
import logging

start_router = Router()
photo = types.FSInputFile("img.png")

WELCOME_TEXT = (
    "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *IslamDev Checker* - —Å–∏—Å—Ç–µ–º—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —É—á–µ–±–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞!\n\n"
    "üìö –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —Ç–µ–±—è:\n"
    "‚Ä¢ üë§ –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–≤–æ–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –∏ –ª–∏—á–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏\n"
    "‚Ä¢ üìù –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π\n"
    "‚Ä¢ ‚úÖ –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π\n"
    "‚Ä¢ üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ –≤ Academy\n\n"
    "üëá –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –±–æ—Ç—É."
)



SYSTEM_UNAVAILABLE_TEXT = """
‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞

–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Ä–∞–±–æ—Ç—ã.
–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
"""


async def get_user_group_info(telegram_id: str, bot: Bot) -> dict:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ–∑–¥–∞–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    """
    try:
        async with GroupsAPI() as groups_api:
            groups = await groups_api.get_all_groups()

            if groups is None:
                logging.error("API is unavailable")
                return {'has_access': False, 'group_found': None, 'student_created': False}

            if not groups:
                logging.warning("No groups found in system")
                return {'has_access': False, 'group_found': None, 'student_created': False}

            # –ò—â–µ–º –≥—Ä—É–ø–ø—É –≥–¥–µ –µ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            for group in groups:
                group_telegram_id = group.get('telegram_id')
                if not group_telegram_id:
                    continue

                try:
                    chat_member = await bot.get_chat_member(
                        chat_id=group_telegram_id,
                        user_id=int(telegram_id)
                    )

                    if chat_member.status not in ['left', 'kicked', 'restricted']:
                        logging.info(f"User {telegram_id} found in group {group_telegram_id}")

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –±–∞–∑–µ –∫–∞–∫ —Å—Ç—É–¥–µ–Ω—Ç
                        async with StudentAPI() as student_api:
                            existing_student = await student_api.get_student_by_telegram_id(telegram_id)

                            if not existing_student:
                                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞
                                student_created = await create_student_in_group(
                                    telegram_id=telegram_id,
                                    group_data=group,
                                    chat_member=chat_member
                                )
                                return {
                                    'has_access': True,
                                    'group_found': group,
                                    'student_created': student_created
                                }
                            else:
                                # –°—Ç—É–¥–µ–Ω—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                                return {
                                    'has_access': True,
                                    'group_found': group,
                                    'student_created': False
                                }

                except Exception as e:
                    logging.warning(f"Error checking user in group {group_telegram_id}: {e}")
                    continue

            logging.info(f"User {telegram_id} not found in any group")
            return {'has_access': False, 'group_found': None, 'student_created': False}

    except Exception as e:
        logging.error(f"Error checking user access: {e}")
        return {'has_access': False, 'group_found': None, 'student_created': False}


async def create_student_in_group(telegram_id: str, group_data: dict, chat_member) -> bool:
    """
    –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞ –≤ –≥—Ä—É–ø–ø–µ
    """
    try:
        async with StudentAPI() as student_api:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ Telegram
            user = chat_member.user
            full_name = f"{user.first_name or ''} {user.last_name or ''}".strip()
            if not full_name:
                full_name = f"User_{telegram_id}"

            username = user.username

            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞
            student_data = {
                "full_name": full_name,
                "telegram_id": telegram_id,
                "username": username,
                "group": group_data['id'],  # ID –≥—Ä—É–ø–ø—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                "is_active": True,
                "total_homeworks": 0,
                "completed_homeworks": 0,
                "average_score": 0.0,
                "best_score": 0.0,
                "total_points": 0.0,
                "rank": 0,
                "progress_level": "–ù–æ–≤–∏—á–æ–∫"
            }

            # –°–æ–∑–¥–∞–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞
            result = await student_api.create_student(student_data)

            if result:
                logging.info(f"Successfully created student {telegram_id} in group {group_data['title']}")
                return True
            else:
                logging.error(f"Failed to create student {telegram_id}")
                return False

    except Exception as e:
        logging.error(f"Error creating student {telegram_id}: {e}")
        return False


async def update_student_username(telegram_id: str, username: str):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç username —Å—Ç—É–¥–µ–Ω—Ç–∞ –µ—Å–ª–∏ –æ–Ω –∏–∑–º–µ–Ω–∏–ª—Å—è
    """
    try:
        async with StudentAPI() as student_api:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ get_student_by_telegram_id
            student = await student_api.get_student_by_telegram_id(telegram_id)
            if student and student.get('username') != username:
                await student_api.update_student(telegram_id, {"username": username})
                logging.info(f"Updated username for student {telegram_id}")
    except Exception as e:
        logging.warning(f"Could not update username for {telegram_id}: {e}")


@start_router.message(Command("start"))
async def cmd_start(message: types.Message, bot: Bot):
    user_telegram_id = str(message.from_user.id)
    username = message.from_user.username

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–µ –∏ —Å–æ–∑–¥–∞–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        access_info = await get_user_group_info(user_telegram_id, bot)

        if access_info['has_access']:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            group_title = access_info['group_found'].get('title', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –≥—Ä—É–ø–ø–µ') if access_info[
                'group_found'] else '–≥—Ä—É–ø–ø–µ'

            greeting = f"{WELCOME_TEXT}"

            await message.answer_photo(photo=photo,caption=greeting, reply_markup=get_main_menu(),parse_mode="Markdown")

            if username:
                await update_student_username(user_telegram_id, username)

        else:

            await message.answer_photo(
                photo=photo,
                caption="‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!\n\n"
                f"–í–∞—à Telegram ID: {user_telegram_id}\n"
                f"Username: @{username if username else '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}\n\n"
                f"–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:\n"
                f"1. –ë—ã—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —É—á–µ–±–Ω–æ–π Telegram-–≥—Ä—É–ø–ø—ã\n"
                f"2. –ì—Ä—É–ø–ø–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–∏—Å—Ç–µ–º—É\n\n"
                f"üìç –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≤–∞—à–µ–º—É –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é.",
                reply_markup=get_teacher_account()
            )

    except Exception as e:
        logging.error(f"Error in /start command: {e}")
        await message.answer(
            SYSTEM_UNAVAILABLE_TEXT + f"\n\n–û—à–∏–±–∫–∞: {str(e)}",
            reply_markup=types.ReplyKeyboardRemove()
        )


@start_router.callback_query(F.data == "main_menu")
async def main_menu(callback: types.CallbackQuery):
    try:
        await callback.message.edit_caption(caption=WELCOME_TEXT, reply_markup=get_main_menu())
    except:
        await callback.message.delete()
        await callback.message.answer_photo(photo=photo, caption=WELCOME_TEXT, reply_markup=get_main_menu(),parse_mode="Markdown")


ABOUT_TEXT = """
‚ú® IslamDev Checker ‚Äî —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è —É—á–µ–±–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏ –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π

üìö –ß—Ç–æ –º–æ–∂–Ω–æ –¥–µ–ª–∞—Ç—å:
‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –∏ –ª–∏—á–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –ø—Ä—è–º–æ —á–µ—Ä–µ–∑ Telegram
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—è—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ —Å—Ä–µ–¥–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑—ã –ø–æ —Ç–µ–º–∞–º, –∫–æ—Ç–æ—Ä—ã–µ —Å—Ç–æ–∏—Ç –ø–æ–≤—Ç–æ—Ä–∏—Ç—å

üí° –û –ø—Ä–æ–µ–∫—Ç–µ:
–†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∞–≤—Ç–æ—Ä–æ–º Islam Duishobaev (@islam_duishobaev)

üöÄ –£—á–∏—Å—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ, —Å–ª–µ–¥–∏ –∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –∏ –¥–æ—Å—Ç–∏–≥–∞–π —Å–≤–æ–∏—Ö —Ü–µ–ª–µ–π –≤–º–µ—Å—Ç–µ —Å IslamDev Checker
"""


@start_router.callback_query(F.data == "menu:about")
async def about_bot(callback: types.CallbackQuery):
    try:
        await callback.message.edit_caption(
            caption=ABOUT_TEXT,
            reply_markup=return_menu(),
        )
    except Exception:
        await callback.message.delete()
        await callback.message.answer_photo(
            photo=photo,
            caption=ABOUT_TEXT,
            reply_markup=return_menu(),
        )


TEACHER_TEXT = """
üü©üü©üü© **–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: Islam Duishobaev** üü©üü©üü©

üéØ **–ü—Ä–æ—Ñ–∏–ª—å:**
‚û° üíªBackend | ‚ö°Frontend |ü§ñTelegramBot
‚û° üí°Backend -->  Python, Django, DRF, FastAPI  ü™Ñ  
‚û° ü§ñTelegram-bot --> Aiogram
‚û° üñ• Frontend: React, Redux, TypeScript, JS 

üìå **–û–± –∞–≤—Ç–æ—Ä–µ:**
üîπ –û–ø—ã—Ç–Ω—ã–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ –ø–æ Python, Django –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ Telegram-–±–æ—Ç–æ–≤  
üîπ –°–æ–∑–¥–∞—Ç–µ–ª—å —Å–∏—Å—Ç–µ–º—ã *IslamDev Checker* –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤  
üîπ –í—Å–µ–≥–¥–∞ –Ω–∞ —Å–≤—è–∑–∏ –≤ Telegram: [@islam_duishobaev](https://t.me/islam_duishobaev)

üöÄ **–ú–∏—Å—Å–∏—è:**
–ü–æ–º–æ–≥–∞—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–∞–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ —É—á–∏—Ç—å—Å—è, –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ –¥–æ—Å—Ç–∏–≥–∞—Ç—å —É—á–µ–±–Ω—ã—Ö —Ü–µ–ª–µ–π  

üí° **–°–æ–≤–µ—Ç –æ—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:**  
–£—á–∏—Å—å —Ä–µ–≥—É–ª—è—Ä–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–π –ø—Ä–∞–∫—Ç–∏–∫—É –∏ –Ω–µ –±–æ–π—Å—è —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å!
"""


@start_router.callback_query(F.data == "menu:about_teacher")
async def teacher(callback: types.CallbackQuery):
    try:
        await callback.message.edit_caption(
            caption=TEACHER_TEXT,
            reply_markup=return_menu(),
            parse_mode="Markdown"
        )
    except Exception:
        await callback.message.delete()
        await callback.message.answer(
            text=TEACHER_TEXT,
            reply_markup=return_menu(),
            parse_mode="Markdown"
        )


