TASK_1_MONTH_LESSON_CHOICES = [
    ("–í–≤–µ–¥–µ–Ω–∏–µ –≤ Python", "–í–≤–µ–¥–µ–Ω–∏–µ –≤ Python. –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ, —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö"),
    ("–£—Å–ª–æ–≤–Ω—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏", "–£—Å–ª–æ–≤–Ω—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ (if, else, elif)"),
    ("–¶–∏–∫–ª—ã", "–¶–∏–∫–ª—ã for, while"),
    ("–°–ø–∏—Å–∫–∏", "–°–ø–∏—Å–∫–∏, —Å—Ä–µ–∑—ã, –∫–æ—Ä—Ç–µ–∂–∏"),
    ("–°–ª–æ–≤–∞—Ä–∏ –∏ –º–Ω–æ–∂–µ—Å—Ç–≤–∞", "–°–ª–æ–≤–∞—Ä–∏, –º–Ω–æ–∂–µ—Å—Ç–≤–∞"),
    ("–§—É–Ω–∫—Ü–∏–∏", "–§—É–Ω–∫—Ü–∏–∏, *args, **kwargs"),
    ("Lambda –∏ –∏—Å–∫–ª—é—á–µ–Ω–∏—è", "Lambda, –∏—Å–∫–ª—é—á–µ–Ω–∏—è"),
    ("–§–∞–π–ª—ã", "–†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏ (txt, JSON, CSV)"),
    ("–ê–ª–≥–æ—Ä–∏—Ç–º—ã", "–û—Å–Ω–æ–≤—ã –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ (–ø–æ–∏—Å–∫, —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞)"),
    ("–ú–∏–Ω–∏ –ø—Ä–æ–µ–∫—Ç", "–ü—Ä–∞–∫—Ç–∏–∫–∞: –∫–æ–Ω—Å–æ–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"),
    ("–û–û–ü", "–í–≤–µ–¥–µ–Ω–∏–µ –≤ –û–û–ü. –ö–ª–∞—Å—Å—ã –∏ –æ–±—ä–µ–∫—Ç—ã"),
    ("–ê—Ç—Ä–∏–±—É—Ç—ã –∏ –º–µ—Ç–æ–¥—ã", "–ê—Ç—Ä–∏–±—É—Ç—ã –∏ –º–µ—Ç–æ–¥—ã"),
    ("–ù–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ", "–ù–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ, –ø–æ–ª–∏–º–æ—Ä—Ñ–∏–∑–º, –∏–Ω–∫–∞–ø—Å—É–ª—è—Ü–∏—è"),
    ("–ú–∞–≥–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–æ–¥—ã", "–ú–∞–≥–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–æ–¥—ã"),
    ("RPG –ø—Ä–æ–µ–∫—Ç", "–ü—Ä–∞–∫—Ç–∏–∫–∞: RPG Game"),
    ("–ú–æ–¥—É–ª–∏", "–í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏"),
    ("–û–∫—Ä—É–∂–µ–Ω–∏—è", "–í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è"),
    ("–†–µ–≥—É–ª—è—Ä–∫–∏", "–†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è"),
    ("–§–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–µ–∫—Ç", "–ò—Ç–æ–≥–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç –º–µ—Å—è—Ü–∞"),
]

from aiogram import Router, types, Bot, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command
from external_services.api_client_user import StudentAPI, GroupsAPI, HWMonth1
from keyboards.inline_keyboards import get_main_menu, get_teacher_account, return_menu
import logging

month1_router = Router()


class Month1HomeworkForm(StatesGroup):
    waiting_for_lesson = State()
    waiting_for_task_condition = State()
    waiting_for_student_answer = State()
    waiting_for_additional_task = State()


def get_lessons_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —É—Ä–æ–∫–∞"""
    keyboard = []
    for lesson_value, lesson_label in TASK_1_MONTH_LESSON_CHOICES:
        keyboard.append([types.InlineKeyboardButton(
            text=lesson_label,
            callback_data=f"month1_lesson:{lesson_value}"
        )])
    keyboard.append([types.InlineKeyboardButton(
        text="üîô –ù–∞–∑–∞–¥",
        callback_data="main_menu"
    )])
    return types.InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_additional_task_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è"""
    return types.InlineKeyboardMarkup(inline_keyboard=[
        [
            types.InlineKeyboardButton(text="‚úÖ –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –∑–∞–¥–∞–Ω–∏–µ", callback_data="add_another_task"),
            types.InlineKeyboardButton(text="üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É", callback_data="submit_homework")
        ],
        [types.InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_homework")]
    ])


def get_month1_main_keyboard():
    """–û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è 1-–≥–æ –º–µ—Å—è—Ü–∞"""
    return types.InlineKeyboardMarkup(inline_keyboard=[
        [
            types.InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="month1:stats"),
            types.InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ", callback_data="month1:checked")
        ],
        [
            types.InlineKeyboardButton(text="‚è≥ –ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ", callback_data="month1:pending"),
            types.InlineKeyboardButton(text="üìù –°–¥–∞—Ç—å –î–ó", callback_data="month1:submit")
        ],
        [
            types.InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        ]
    ])


@month1_router.callback_query(F.data == "month:1")
async def handle_month1_main(callback: types.CallbackQuery, bot: Bot):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é 1-–≥–æ –º–µ—Å—è—Ü–∞"""
    await callback.message.delete()
    photo = types.FSInputFile("img.png")
    await callback.message.answer_photo(
        photo=photo,
        caption="üìò 1-–π –º–µ—Å—è—Ü: –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ Python\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_month1_main_keyboard()
    )
    await callback.answer()


@month1_router.callback_query(F.data == "month1:submit")
async def start_month1_homework(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è"""
    await callback.message.edit_caption(
        caption="üìù –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è \n\n–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–∫, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ —Å–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ:",
        reply_markup=get_lessons_keyboard()
    )
    await state.set_state(Month1HomeworkForm.waiting_for_lesson)
    await callback.answer()


@month1_router.callback_query(F.data.startswith("month1_lesson:"), Month1HomeworkForm.waiting_for_lesson)
async def process_lesson_selection(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —É—Ä–æ–∫–∞"""
    lesson = callback.data.split(":")[1]

    # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞
    lesson_label = next((label for value, label in TASK_1_MONTH_LESSON_CHOICES if value == lesson), lesson)

    await state.update_data(
        lesson=lesson,
        lesson_label=lesson_label,
        main_message_id=callback.message.message_id  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    )

    await callback.message.edit_caption(
        caption=f"üìñ **–£—Ä–æ–∫:** {lesson_label}\n\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —É—Å–ª–æ–≤–∏–µ –∑–∞–¥–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –≤–∞–º –¥–∞–ª–∏:",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_homework")]
        ])
    )
    await state.set_state(Month1HomeworkForm.waiting_for_task_condition)
    await callback.answer()


@month1_router.message(Month1HomeworkForm.waiting_for_task_condition)
async def process_task_condition(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ª–æ–≤–∏—è –∑–∞–¥–∞–Ω–∏—è"""
    task_condition = message.text.strip()

    await state.update_data(task_condition=task_condition)

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await message.delete()

    data = await state.get_data()
    lesson_label = data.get('lesson_label', '')
    main_message_id = data.get('main_message_id')

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await message.bot.edit_message_caption(
        chat_id=message.chat.id,
        message_id=main_message_id,
        caption=f"üìñ –£—Ä–æ–∫: {lesson_label}\n\n"
                "‚úÖ –£—Å–ª–æ–≤–∏–µ –∑–∞–¥–∞–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–æ!\n\n"
                "üìù –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç/—Ä–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_homework")]
        ])
    )

    await state.set_state(Month1HomeworkForm.waiting_for_student_answer)


@month1_router.message(Month1HomeworkForm.waiting_for_student_answer)
async def process_student_answer(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ —Å—Ç—É–¥–µ–Ω—Ç–∞"""
    student_answer = message.text or message.caption or ""
    data = await state.get_data()

    if not student_answer.strip():
        await message.answer("‚ùå –û—Ç–≤–µ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç:")
        return

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await message.delete()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ
    current_tasks = data.get('tasks', [])
    current_tasks.append({
        "task_condition": data['task_condition'],
        "student_answer": student_answer.strip()
    })

    await state.update_data(tasks=current_tasks)

    tasks_count = len(current_tasks)
    main_message_id = data.get('main_message_id')

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await message.bot.edit_message_caption(
        chat_id=message.chat.id,
        message_id=main_message_id,
        caption=f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ #{tasks_count} –¥–æ–±–∞–≤–ª–µ–Ω–æ!\n\n"
                "–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–Ω–æ –∑–∞–¥–∞–Ω–∏–µ –∫ —ç—Ç–æ–π –¥–æ–º–∞—à–Ω–µ–π —Ä–∞–±–æ—Ç–µ?",
        reply_markup=get_additional_task_keyboard()
    )

    await state.set_state(Month1HomeworkForm.waiting_for_additional_task)


@month1_router.callback_query(F.data == "add_another_task", Month1HomeworkForm.waiting_for_additional_task)
async def add_another_task(callback: types.CallbackQuery, state: FSMContext):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –µ—â–µ –æ–¥–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è"""
    data = await state.get_data()
    lesson_label = data.get('lesson_label', '')
    main_message_id = data.get('main_message_id')

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback.message.edit_caption(
        caption=f"üìñ **–£—Ä–æ–∫:** {lesson_label}\n\n–í–≤–µ–¥–∏—Ç–µ —É—Å–ª–æ–≤–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è:",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_homework")]
        ])
    )

    await state.set_state(Month1HomeworkForm.waiting_for_task_condition)
    await callback.answer()


@month1_router.callback_query(F.data == "submit_homework", Month1HomeworkForm.waiting_for_additional_task)
async def submit_homework_final(callback: types.CallbackQuery, state: FSMContext):
    """–§–∏–Ω–∞–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è"""
    try:
        data = await state.get_data()
        tasks = data.get('tasks', [])
        lesson = data.get('lesson')
        lesson_label = data.get('lesson_label', '')
        main_message_id = data.get('main_message_id')

        if not tasks:
            await callback.message.edit_caption(
                caption="‚ùå –ù–µ—Ç –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏",
                reply_markup=get_month1_main_keyboard()
            )
            await state.clear()
            return

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç—É–¥–µ–Ω—Ç–∞
        async with StudentAPI() as student_api:
            student = await student_api.get_student_by_telegram_id(str(callback.from_user.id))

            if not student:
                await callback.message.edit_caption(
                    caption="‚ùå –°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
                    reply_markup=get_month1_main_keyboard()
                )
                await state.clear()
                return

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–º–∞—à–∫—É —á–µ—Ä–µ–∑ API
            async with HWMonth1() as hw_api:
                result = await hw_api.create_homework(
                    student_id=student['id'],
                    lesson=lesson,
                    tasks=tasks
                )

                if result:
                    await callback.message.edit_caption(
                        caption=f"‚úÖ –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!\n\n"
                                f"üìñ –£—Ä–æ–∫: {lesson_label}\n"
                                f"üìù –ó–∞–¥–∞–Ω–∏–π: {len(tasks)}\n\n"
                                f"üìä –°—Ç–∞—Ç—É—Å: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É AI\n"
                                f"‚è≥ –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä–∫–∏!",
                        reply_markup=get_month1_main_keyboard()
                    )
                else:
                    await callback.message.edit_caption(
                        caption=f"‚ùå –í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –¥–æ–º–∞—à–∫—É –ø–æ —É—Ä–æ–∫—É {lesson_label}",
                        reply_markup=get_month1_main_keyboard()
                    )

        await state.clear()

    except Exception as e:
        logging.error(f"Error submitting homework: {e}")
        await callback.message.edit_caption(
            caption="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è",
            reply_markup=get_month1_main_keyboard()
        )
        await state.clear()

    await callback.answer()


@month1_router.callback_query(F.data == "cancel_homework")
async def cancel_homework(callback: types.CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è"""
    await state.clear()
    await callback.message.edit_caption(
        caption="‚ùå –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞",
        reply_markup=get_month1_main_keyboard()
    )
    await callback.answer()


@month1_router.message(Command("cancel"))
async def cancel_handler(message: types.Message, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –ª—é–±–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
    current_state = await state.get_state()
    if current_state is None:
        return

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await message.delete()

    data = await state.get_data()
    main_message_id = data.get('main_message_id')

    if main_message_id:
        await message.bot.edit_message_caption(
            chat_id=message.chat.id,
            message_id=main_message_id,
            caption="‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
            reply_markup=get_main_menu()
        )

    await state.clear()



@month1_router.callback_query(F.data == "month1:stats")
async def handle_month1_stats(callback: types.CallbackQuery):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ 1-–º—É –º–µ—Å—è—Ü—É"""
    try:
        async with HWMonth1() as hw_api:
            student_api = StudentAPI()
            async with student_api:
                student = await student_api.get_student_by_telegram_id(str(callback.from_user.id))

                if not student:
                    await callback.message.edit_caption(
                        caption="‚ùå –°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
                        reply_markup=get_month1_main_keyboard()
                    )
                    return

                stats = await hw_api.get_student_stats(student['id'])

                message_text = f"""
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ 1-–≥–æ –º–µ—Å—è—Ü–∞

üìö –í—Å–µ–≥–æ –¥–æ–º–∞—à–Ω–∏—Ö —Ä–∞–±–æ—Ç: {stats['total_homeworks']}
üìù –í—Å–µ–≥–æ –∑–∞–¥–∞–Ω–∏–π: {stats['total_tasks']}
‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: {stats['checked_tasks']}
‚è≥ –û–∂–∏–¥–∞—é—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏: {stats['pending_tasks']}
‚≠ê –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: {stats['average_grade']:.1f}/10

‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ —É—Ä–æ–∫–æ–≤: {len(stats['completed_lessons'])}
üîÑ –í –ø—Ä–æ—Ü–µ—Å—Å–µ: {len(stats['pending_lessons'])}
                """

                await callback.message.edit_caption(
                    caption=message_text,
                    reply_markup=get_month1_main_keyboard()
                )

    except Exception as e:
        logging.error(f"Error getting month1 stats: {e}")
        await callback.message.edit_caption(
            caption="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏",
            reply_markup=get_month1_main_keyboard()
        )
    await callback.answer()


@month1_router.callback_query(F.data == "month1:checked")
async def handle_month1_checked(callback: types.CallbackQuery):
    """–ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è"""
    try:
        async with HWMonth1() as hw_api:
            student_api = StudentAPI()
            async with student_api:
                student = await student_api.get_student_by_telegram_id(str(callback.from_user.id))

                if not student:
                    await callback.message.edit_caption(
                        caption="‚ùå –°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
                        reply_markup=get_month1_main_keyboard()
                    )
                    return

                checked_tasks = await hw_api.get_checked_tasks(student['id'])

                if not checked_tasks:
                    await callback.message.edit_caption(
                        caption="‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è\n\n–ù–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π",
                        reply_markup=get_month1_main_keyboard()
                    )
                    return

                message_text = "‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è:\n\n"
                keyboard = []

                for i, homework in enumerate(checked_tasks[:10]):  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 10 —Ä–∞–±–æ—Ç–∞–º–∏
                    lesson = homework.get('lesson', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —É—Ä–æ–∫')
                    homework_id = homework.get('id')
                    items = homework.get('items', [])
                    checked_items = [item for item in items if item.get('is_checked')]

                    if checked_items:
                        avg_grade = sum(item.get('grade', 0) for item in checked_items) / len(checked_items)

                        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∫–∞–∂–¥–æ–π –¥–æ–º–∞—à–Ω–µ–π —Ä–∞–±–æ—Ç—ã
                        keyboard.append([
                            types.InlineKeyboardButton(
                                text=f"üìñ {lesson} | ‚≠ê {avg_grade:.1f}/10 | üìù {len(checked_items)}",
                                callback_data=f"month1_hw_detail:{homework_id}"
                            )
                        ])

                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
                keyboard.append([
                    types.InlineKeyboardButton(
                        text="üîô –ù–∞–∑–∞–¥",
                        callback_data="month:1"
                    )
                ])

                if len(checked_tasks) > 10:
                    message_text += f"üìã –ü–æ–∫–∞–∑–∞–Ω–æ 10 –∏–∑ {len(checked_tasks)} —Ä–∞–±–æ—Ç\n"

                await callback.message.edit_caption(
                    caption=message_text,
                    reply_markup=types.InlineKeyboardMarkup(inline_keyboard=keyboard)
                )

    except Exception as e:
        logging.error(f"Error getting checked tasks: {e}")
        await callback.message.edit_caption(
            caption="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π",
            reply_markup=get_month1_main_keyboard()
        )
    await callback.answer()


import re

def extract_analysis_text(ai_feedback: str) -> str:
    match = re.search(r"-\*\*–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:\*\*", ai_feedback)
    return match.group(0).strip() if match else ""


@month1_router.callback_query(F.data.startswith("month1_hw_detail:"))
async def handle_homework_detail(callback: types.CallbackQuery):
    """–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ–º–∞—à–Ω–µ–π —Ä–∞–±–æ—Ç–µ"""
    try:
        homework_id = callback.data.split(":")[1]

        async with HWMonth1() as hw_api:
            homework = await hw_api.get_homework_by_id(homework_id)

            if not homework:
                await callback.answer("‚ùå –î–æ–º–∞—à–Ω—è—è —Ä–∞–±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
                return

            lesson = homework.get('lesson', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —É—Ä–æ–∫')
            items = homework.get('items', [])
            checked_items = [item for item in items if item.get('is_checked')]

            if not checked_items:
                await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π", show_alert=True)
                return

            # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞
            lesson_label = next((label for value, label in TASK_1_MONTH_LESSON_CHOICES if value == lesson), lesson)

            message_text = f"üìñ {lesson_label}\n\n"
            message_text += f"üìä –°—Ç–∞—Ç—É—Å: ‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ\n"
            message_text += f"üìù –í—Å–µ–≥–æ –∑–∞–¥–∞–Ω–∏–π: {len(items)}\n"
            message_text += f"‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: {len(checked_items)}\n\n"

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∫–∞–∂–¥–æ–º—É –∑–∞–¥–∞–Ω–∏—é
            for i, item in enumerate(checked_items, 1):
                grade = item.get('grade', 0)
                teacher_comment = item.get('ai_feedback', '–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è')
                message_text += f"–ó–∞–¥–∞–Ω–∏–µ {i}:\n"
                message_text += f"‚≠ê –û—Ü–µ–Ω–∫–∞: {grade}/10\n"
                message_text += f"{teacher_comment.strip().splitlines()[-1]}\n"

                if i < len(checked_items):  # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É –∑–∞–¥–∞–Ω–∏—è–º–∏
                    message_text += "‚îÄ" * 30 + "\n\n"

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = [
                [types.InlineKeyboardButton(text="üîô –ö —Å–ø–∏—Å–∫—É —Ä–∞–±–æ—Ç", callback_data="month1:checked")],
                [types.InlineKeyboardButton(text="üìä –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="month:1")]
            ]

            await callback.message.edit_caption(
                caption=message_text,
                reply_markup=types.InlineKeyboardMarkup(inline_keyboard=keyboard)
            )

    except Exception as e:
        logging.error(f"Error getting homework detail: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–µ—Ç–∞–ª–µ–π", show_alert=True)


@month1_router.callback_query(F.data == "month1:pending")
async def handle_month1_pending(callback: types.CallbackQuery):
    """–ó–∞–¥–∞–Ω–∏—è –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ"""
    try:
        async with HWMonth1() as hw_api:
            student_api = StudentAPI()
            async with student_api:
                student = await student_api.get_student_by_telegram_id(str(callback.from_user.id))

                if not student:
                    await callback.message.edit_caption(
                        caption="‚ùå –°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
                        reply_markup=get_month1_main_keyboard()
                    )
                    return

                pending_tasks = await hw_api.get_pending_tasks(student['id'])

                if not pending_tasks:
                    await callback.message.edit_caption(
                        caption="‚è≥ –ó–∞–¥–∞–Ω–∏—è –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ\n\n–í—Å–µ –∑–∞–¥–∞–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã! üéâ",
                        reply_markup=get_month1_main_keyboard()
                    )
                    return

                message_text = "‚è≥ **–ó–∞–¥–∞–Ω–∏—è –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ:**\n\n"
                keyboard = []

                for i, homework in enumerate(pending_tasks[:10]):
                    lesson = homework.get('lesson', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —É—Ä–æ–∫')
                    homework_id = homework.get('id')
                    items = homework.get('items', [])
                    pending_count = sum(1 for item in items if not item.get('is_checked'))

                    keyboard.append([
                        types.InlineKeyboardButton(
                            text=f"üìñ {lesson} | ‚è≥ {pending_count} –∑–∞–¥–∞–Ω–∏–π",
                            callback_data=f"month1_hw_pending_detail:{homework_id}"
                        )
                    ])

                keyboard.append([
                    types.InlineKeyboardButton(
                        text="üîô –ù–∞–∑–∞–¥",
                        callback_data="month:1"
                    )
                ])

                if len(pending_tasks) > 10:
                    message_text += f"üìã –ü–æ–∫–∞–∑–∞–Ω–æ 10 –∏–∑ {len(pending_tasks)} —Ä–∞–±–æ—Ç\n"

                await callback.message.edit_caption(
                    caption=message_text,
                    reply_markup=types.InlineKeyboardMarkup(inline_keyboard=keyboard)
                )

    except Exception as e:
        logging.error(f"Error getting pending tasks: {e}")
        await callback.message.edit_caption(
            caption="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏–π –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ",
            reply_markup=get_month1_main_keyboard()
        )
    await callback.answer()


@month1_router.callback_query(F.data.startswith("month1_hw_pending_detail:"))
async def handle_pending_homework_detail(callback: types.CallbackQuery):
    """–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ–º–∞—à–Ω–µ–π —Ä–∞–±–æ—Ç–µ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ"""
    try:
        homework_id = callback.data.split(":")[1]

        async with HWMonth1() as hw_api:
            homework = await hw_api.get_homework_by_id(homework_id)

            if not homework:
                await callback.answer("‚ùå –î–æ–º–∞—à–Ω—è—è —Ä–∞–±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
                return

            lesson = homework.get('lesson', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —É—Ä–æ–∫')
            items = homework.get('items', [])

            # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞
            lesson_label = next((label for value, label in TASK_1_MONTH_LESSON_CHOICES if value == lesson), lesson)

            message_text = f"üìñ {lesson_label}\n\n"
            message_text += f"üìä –°—Ç–∞—Ç—É—Å: ‚è≥ –ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ\n"
            message_text += f"üìù –í—Å–µ–≥–æ –∑–∞–¥–∞–Ω–∏–π: {len(items)}\n"
            message_text += f"‚è≥ –û–∂–∏–¥–∞—é—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏: {sum(1 for item in items if not item.get('is_checked'))}\n\n"

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∫–∞–∂–¥–æ–º—É –∑–∞–¥–∞–Ω–∏—é
            for i, item in enumerate(items, 1):
                status = "‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ" if item.get('is_checked') else "‚è≥ –û–∂–∏–¥–∞–µ—Ç"
                grade = item.get('grade', '‚Äî')

                message_text += f"**–ó–∞–¥–∞–Ω–∏–µ {i}:** {status}\n"
                if item.get('is_checked'):
                    message_text += f"‚≠ê –û—Ü–µ–Ω–∫–∞: {grade}/10\n"
                message_text += "\n"

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = [
                [types.InlineKeyboardButton(text="üîô –ö —Å–ø–∏—Å–∫—É —Ä–∞–±–æ—Ç", callback_data="month1:pending")],
                [types.InlineKeyboardButton(text="üìä –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="month:1")]
            ]

            await callback.message.edit_caption(
                caption=message_text,
                reply_markup=types.InlineKeyboardMarkup(inline_keyboard=keyboard)
            )

    except Exception as e:
        logging.error(f"Error getting pending homework detail: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–µ—Ç–∞–ª–µ–π", show_alert=True)
