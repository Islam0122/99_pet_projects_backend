from aiogram import Router, types, Bot, F
from external_services.api_client_user import StudentAPI, GroupsAPI
from keyboards.inline_keyboards import get_main_menu,get_teacher_account,return_menu
import logging

profile_router = Router()
photo = types.FSInputFile("img.png")


def format_complete_student_info(student_data: dict, progress_data: dict = None) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—É–¥–µ–Ω—Ç–µ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏"""
    if not student_data:
        return "‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç—É–¥–µ–Ω—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"

    full_name = student_data.get('full_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
    username = student_data.get('username', '–ù–µ —É–∫–∞–∑–∞–Ω')
    group_title = student_data.get('group_title', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')
    progress_level = student_data.get('progress_level', '–ù–æ–≤–∏—á–æ–∫')
    is_active = student_data.get('is_active', True)
    average_score = student_data.get('average_score', 0.0)
    best_score = student_data.get('best_score', 0.0)
    total_points = student_data.get('total_points', 0.0)

    total_homeworks = student_data.get('total_homeworks', 0)
    completed_homeworks = student_data.get('completed_homeworks', 0)
    rank = student_data.get('rank', 0)

    progress_percent = 0
    if total_homeworks > 0:
        progress_percent = (completed_homeworks / total_homeworks) * 100

    def get_progress_bar(percentage, length=15):
        filled = int((percentage / 100) * length)
        empty = length - filled
        return "‚ñà" * filled + "‚ñë" * empty

    progress_bar = get_progress_bar(progress_percent)

    status_emoji = "‚úÖ" if is_active else "‚ùå"

    complete_text = f"""
üë§ <b>–ü–†–û–§–ò–õ–¨ –°–¢–£–î–ï–ù–¢–ê</b>

üìù <b>–õ–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>
‚îú –ò–º—è: {full_name}
‚îú Username: @{username}
‚îú –ì—Ä—É–ø–ø–∞: {group_title}
‚îú –£—Ä–æ–≤–µ–Ω—å: {progress_level}
‚îî –°—Ç–∞—Ç—É—Å: {status_emoji} {'–ê–∫—Ç–∏–≤–µ–Ω' if is_active else '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}

üìä <b>–£—á–µ–±–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å:</b>
‚îú –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {completed_homeworks}/{total_homeworks} –∑–∞–¥–∞–Ω–∏–π
‚îú –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {progress_percent:.1f}%
‚îú –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress_bar}
‚îî –†–µ–π—Ç–∏–Ω–≥ –≤ academy: #{rank}

üéØ <b>–ê–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:</b>
‚îú –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {average_score:.1f}
‚îú –õ—É—á—à–∏–π –±–∞–ª–ª: {best_score:.1f}
‚îî –í—Å–µ–≥–æ –±–∞–ª–ª–æ–≤: {total_points:.1f}

‚≠ê <b>–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:</b> {progress_level}
"""

    if progress_data:
        last_homework = progress_data.get('last_homework_done')
        if last_homework:
            complete_text += f"\nüìÖ <b>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ:</b> {last_homework}"

    return complete_text


@profile_router.callback_query(F.data == "menu:profile")
async def show_complete_profile(callback: types.CallbackQuery, bot: Bot):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å —Å—Ç—É–¥–µ–Ω—Ç–∞ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏"""
    user_telegram_id = str(callback.from_user.id)

    try:
        await callback.answer()

        async with StudentAPI() as student_api:
            student = await student_api.get_student_by_telegram_id(user_telegram_id)

            if not student:
                await callback.message.answer(
                    "‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ —Å–∏—Å—Ç–µ–º–µ.",
                    reply_markup=return_menu()
                )
                return

            progress = await student_api.get_student_progress(user_telegram_id)

            profile_text = format_complete_student_info(student, progress)

            await callback.message.edit_caption(
                caption=profile_text,
                reply_markup=return_menu(),
                parse_mode="HTML"
            )

    except Exception as e:
        logging.error(f"Error showing complete profile: {e}")
        await callback.message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=return_menu()
        )


@profile_router.callback_query(F.data == "menu:top_students")
async def show_top_students(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ø —Å—Ç—É–¥–µ–Ω—Ç–æ–≤"""
    try:
        await callback.answer()

        async with StudentAPI() as student_api:
            top_students = await student_api.get_top_students(limit=10)  # –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –ª–∏–º–∏—Ç

            if not top_students:
                await callback.message.answer(
                    "‚ùå –ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å—Ç—É–¥–µ–Ω—Ç–∞—Ö.",
                    reply_markup=return_menu()
                )
                return

            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤—ã–π —Ç–µ–∫—Å—Ç —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞–º–∏
            text = "üèÜ <b>–¢–æ–ø —Å—Ç—É–¥–µ–Ω—Ç–æ–≤:</b>\n\n"
            for idx, s in enumerate(top_students, start=1):
                # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
                total_homeworks = s.get('total_homeworks', 0)
                completed_homeworks = s.get('completed_homeworks', 0)
                progress_percent = 0
                if total_homeworks > 0:
                    progress_percent = (completed_homeworks / total_homeworks) * 100
                filled = int((progress_percent / 100) * 10)
                empty = 10 - filled
                progress_bar = "‚ñà" * filled + "‚ñë" * empty

                text += (
                    f"{idx}. {s.get('full_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')} ‚Äî {s.get('progress_level', '–ù–æ–≤–∏—á–æ–∫')}\n"
                    f"    –ì—Ä—É–ø–ø–∞: {s.get('group_title')}\n"
                    f"    üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress_bar} {progress_percent:.1f}%\n"
                    f"    ‚≠ê –ë–∞–ª–ª—ã: {s.get('total_points', 0)}\n\n"
                )

            await callback.message.edit_caption(
                caption=text,
                reply_markup=return_menu(),
                parse_mode="HTML"
            )

    except Exception as e:
        logging.error(f"Error showing top students: {e}")
        await callback.message.edit_caption(
            caption="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–æ–ø–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤.",
            reply_markup=return_menu()
        )
