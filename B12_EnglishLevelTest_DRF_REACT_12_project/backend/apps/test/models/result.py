from django.db import models
from django.db.models.signals import post_save
from django.dispatch import receiver
from io import BytesIO
from django.core.files.base import ContentFile
from django.template.loader import render_to_string
from django.core.mail import EmailMessage
from django.conf import settings
import logging
from weasyprint import HTML
import os
from .placementtest import PlacementTest
from  .basemodel import  BaseModel
from .test import Test
from .level import Level

logger = logging.getLogger(__name__)

# ===========================
# –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞ + –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
# ===========================
class ResultsTest(BaseModel):
    test = models.ForeignKey(
        Test,
        on_delete=models.CASCADE,
        related_name='results',
        verbose_name='–¢–µ—Å—Ç',
        help_text='–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ—à—ë–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
    )
    name = models.CharField(max_length=255, verbose_name='–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', help_text='–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞')
    email = models.EmailField(verbose_name='Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', help_text='Email –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞')
    score = models.PositiveIntegerField(verbose_name='–ù–∞–±—Ä–∞–Ω–Ω—ã–µ –±–∞–ª–ª—ã')
    total_questions = models.PositiveIntegerField(verbose_name='–í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤')
    correct_answers = models.PositiveIntegerField(verbose_name='–ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã')
    wrong_answers = models.PositiveIntegerField(verbose_name='–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã')
    percentage = models.DecimalField(max_digits=5, decimal_places=2, verbose_name='–ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤')
    certificate = models.FileField(upload_to='certificates/', blank=True, null=True, verbose_name='–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç (PDF)')

    def __str__(self):
        return f"–†–µ–∑—É–ª—å—Ç–∞—Ç '{self.test.name}' ‚Äî {self.name} ({self.email})"

    class Meta:
        verbose_name = '–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞'
        verbose_name_plural = '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤'
        ordering = ['-created_at']




# ===========================
# –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞ + –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
# ===========================
class PlacementTestResult(BaseModel):
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è Placement Test"""

    test = models.ForeignKey(
        'PlacementTest',
        on_delete=models.CASCADE,
        related_name='results',
        verbose_name='–¢–µ—Å—Ç',
        help_text='–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ—à—ë–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
    )
    name = models.CharField(
        max_length=255,
        verbose_name='–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
        help_text='–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞'
    )
    email = models.EmailField(
        verbose_name='Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
        help_text='Email –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞'
    )

    # –û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
    total_questions = models.PositiveIntegerField(
        verbose_name='–í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤',
        default=0
    )
    correct_answers = models.PositiveIntegerField(
        verbose_name='–ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã',
        default=0
    )
    wrong_answers = models.PositiveIntegerField(
        verbose_name='–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã',
        default=0
    )
    percentage = models.DecimalField(
        max_digits=5,
        decimal_places=2,
        verbose_name='–ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤',
        default=0
    )
    score = models.PositiveIntegerField(
        verbose_name='–ù–∞–±—Ä–∞–Ω–Ω—ã–µ –±–∞–ª–ª—ã',
        default=0
    )

    # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –ø–æ —É—Ä–æ–≤–Ω—è–º
    level_a1_correct = models.PositiveIntegerField(default=0)
    level_a2_correct = models.PositiveIntegerField(default=0)
    level_b1_correct = models.PositiveIntegerField(default=0)
    level_b2_correct = models.PositiveIntegerField(default=0)
    level_c1_correct = models.PositiveIntegerField(default=0)
    level_c2_correct = models.PositiveIntegerField(default=0)

    # –û–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å
    level = models.ForeignKey(
        'Level',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="–û–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å",
        help_text="–ö–∞–∫–æ–π —É—Ä–æ–≤–µ–Ω—å –±—ã–ª –æ–ø—Ä–µ–¥–µ–ª—ë–Ω –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º —Ç–µ—Å—Ç–∞"
    )

    # –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
    certificate = models.FileField(
        upload_to='certificates/',
        blank=True,
        null=True,
        verbose_name='–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç (PDF)'
    )


    class Meta:
        verbose_name = '–†–µ–∑—É–ª—å—Ç–∞—Ç Placement —Ç–µ—Å—Ç–∞'
        verbose_name_plural = '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã Placement —Ç–µ—Å—Ç–æ–≤'
        ordering = ['-created_at']

    def __str__(self):
        return f"–†–µ–∑—É–ª—å—Ç–∞—Ç '{self.test.name}' ‚Äî {self.name} ({self.email})"

    def save(self, *args, **kwargs):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Å—á—ë—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º"""
        # –°—á–∏—Ç–∞–µ–º –æ–±—â–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
        self.correct_answers = (
                self.level_a1_correct + self.level_a2_correct +
                self.level_b1_correct + self.level_b2_correct +
                self.level_c1_correct + self.level_c2_correct
        )
        self.wrong_answers = self.total_questions - self.correct_answers

        # –í–∑–≤–µ—à–µ–Ω–Ω—ã–π —Å—á—ë—Ç (–¥–ª—è —É—Ä–æ–≤–Ω—è)
        self.score = (
                (self.level_a1_correct * 2) +
                (self.level_a2_correct * 2.5) +
                (self.level_b1_correct * 3) +
                (self.level_b2_correct * 3.5) +
                (self.level_c1_correct * 4) +
                (self.level_c2_correct * 4.5)
        )

        # --- –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞ –ø–æ –∫–æ–ª-–≤—É –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ ---
        if self.total_questions > 0:
            self.percentage = round((self.correct_answers / self.total_questions) * 100, 2)
        else:
            self.percentage = 0

        # --- –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –ø–æ –í–ï–°–£ (score) ---
        if self.percentage >= 90:
            level_title = "C2"
        elif self.percentage >= 75:
            level_title = "C1"
        elif self.percentage >= 60:
            level_title = "B2"
        elif self.percentage >= 45:
            level_title = "B1"
        elif self.percentage >= 30:
            level_title = "A2"
        else:
            level_title = "A1"

        self.level = Level.objects.filter(title=level_title).first()

        super().save(*args, **kwargs)


# ===========================
# –°–∏–≥–Ω–∞–ª: –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ –ø–æ—á—Ç—É
# ===========================

@receiver(post_save, sender=PlacementTestResult)
def generate_certificate_and_send_email2(sender, instance, created, **kwargs):
    if created and not instance.certificate:
        context = {
            'name': instance.name,
            'topic': instance.test.name,
            'level': instance.level.title if instance.level else "–ù–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω",
            'percentage': instance.percentage,
            'correct_answers': instance.correct_answers,
            'total_questions': instance.total_questions,
            'date': instance.created_at.strftime('%d-%m-%Y'),
        }

        html_string = render_to_string("certificate2_template.html", context)

        pdf_file = BytesIO()
        base_url = f'file://{os.path.join(settings.BASE_DIR, "core", "static")}/'
        HTML(string=html_string, base_url=base_url).write_pdf(pdf_file)

        pdf_file.seek(0)
        filename = f"certificate_{instance.id}.pdf"
        pdf_content = pdf_file.read()
        instance.certificate.save(filename, ContentFile(pdf_content))

        email_subject = 'üéì –í–∞—à —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –∑–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞ –ø–æ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º—É'
        email_body = f"""
        –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {instance.name}!

        –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º —Ç–µ—Å—Ç–∞ "{instance.test.name}"! üéâ

        –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç:
        - –û–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å: {context['level']}
        - –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {context['correct_answers']}
        - –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {instance.wrong_answers}
        - –ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {context['percentage']}%

        –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω –∫ –ø–∏—Å—å–º—É.

        –° —É–≤–∞–∂–µ–Ω–∏–µ–º Islam Dev,  
        –ö–æ–º–∞–Ω–¥–∞ –æ–±—É—á–µ–Ω–∏—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–º—É üåü
        """
        try:
            email = EmailMessage(
                subject=email_subject,
                body=email_body,
                from_email=settings.EMAIL_HOST_USER,
                to=[instance.email],
            )
            email.attach(filename, pdf_content, 'application/pdf')
            email.send()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å—å–º–∞: {e}")

        pdf_file.close()