import base64
import json
import os
import uuid
from io import BytesIO

import requests
from aiogram import Bot, types, Router, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from dotenv import load_dotenv, find_dotenv
from requests.auth import HTTPBasicAuth

load_dotenv(find_dotenv())

CLIENT_ID = '71b92890-bf91-4b6b-9645-6561b93e3d7d'
SECRET = '3278c7e4-6c0c-4b7b-a8b7-9baadb679504'

ai_help_private_router = Router()


def get_access_token() -> str:
    url = "https://ngw.devices.sberbank.ru:9443/api/v2/oauth"
    headers = {
        'Content-Type': 'application/x-www-form-urlencoded',
        'Accept': 'application/json',
        'RqUID': str(uuid.uuid4()),
    }
    payload = {"scope": "GIGACHAT_API_PERS"}

    try:
        res = requests.post(
            url=url,
            headers=headers,
            auth=HTTPBasicAuth(CLIENT_ID, SECRET),
            data=payload,
            verify=False,
        )
        res.raise_for_status()
        access_token = res.json().get("access_token")
        if not access_token:
            raise ValueError("–¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –Ω–µ –±—ã–ª –ø–æ–ª—É—á–µ–Ω.")
        return access_token
    except requests.RequestException as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ access token:", e)
        return None


def send_prompt(msg: str, access_token: str):
    url = "https://gigachat.devices.sberbank.ru/api/v1/chat/completions"
    payload = json.dumps({
        "model": "GigaChat",
        "messages": [
            {
                "role": "user",
                "content": msg,
            }
        ],
    })
    headers = {
        'Content-Type': 'application/json',
        'Accept': 'application/json',
        'Authorization': f'Bearer {access_token}'
    }

    try:
        response = requests.post(url, headers=headers, data=payload, verify=False)
        response.raise_for_status()
        return response.json()["choices"][0]["message"]["content"]
    except requests.RequestException as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ GigaChat API:", e)
        return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç GigaChat."


def sent_prompt_and_get_response(system_prompt: str, user_question: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–º–ø—Ç–∞ —Å —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –∏ –≤–æ–ø—Ä–æ—Å–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    access_token = get_access_token()

    if access_token:
        # –°–æ–±–∏—Ä–∞–µ–º –ø–æ–ª–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
        full_prompt = f"{system_prompt}\n\n–í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_question}"
        response = send_prompt(full_prompt, access_token)
        return response
    else:
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å access token."


class AiAssistanceState(StatesGroup):
    WaitingForQuestion = State()


def get_cancel_kb():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_ai_help")]
        ]
    )


def get_ai_help_kb():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üìö –°–æ–≤–µ—Ç –ø–æ –∫–Ω–∏–≥–µ", callback_data="ai_book_advice")],
            [InlineKeyboardButton(text="üí™ –ú–æ—Ç–∏–≤–∞—Ü–∏—è", callback_data="ai_motivation")],
            [InlineKeyboardButton(text="‚ùì –í–∏–∫—Ç–æ—Ä–∏–Ω–∞", callback_data="ai_quiz")],
            [InlineKeyboardButton(text="üîÑ –î—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å", callback_data="ai_help")],
            [InlineKeyboardButton(text="‚è™ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
    )


def get_ai_categories_kb():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üìö –°–æ–≤–µ—Ç –ø–æ –∫–Ω–∏–≥–µ", callback_data="ai_book_advice")],
            [InlineKeyboardButton(text="üí™ –ú–æ—Ç–∏–≤–∞—Ü–∏—è", callback_data="ai_motivation")],
            [InlineKeyboardButton(text="‚ùì –í–∏–∫—Ç–æ—Ä–∏–Ω–∞", callback_data="ai_quiz")],
            [InlineKeyboardButton(text="üí¨ –û–±—â–∏–π –≤–æ–ø—Ä–æ—Å", callback_data="ai_help")],
            [InlineKeyboardButton(text="‚è™ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
    )


@ai_help_private_router.callback_query(F.data == "ai_help")
async def send_ai_help_request(query: types.CallbackQuery, state: FSMContext) -> None:
    """–ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ —Å AI –ø–æ–º–æ—â–Ω–∏–∫–æ–º"""
    await state.update_data(ai_message_id=query.message.message_id)

    try:
        await query.message.edit_text(
            text=(
                "ü§ñ <b>Readify AI –ü–æ–º–æ—â–Ω–∏–∫</b>\n\n"
                "–Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —á—Ç–µ–Ω–∏—é! üéØ\n\n"
                "–ú–æ–≥—É –ø–æ–º–æ—á—å —Å:\n"
                "‚Ä¢ üìö –°–æ–≤–µ—Ç–∞–º–∏ –ø–æ –∫–Ω–∏–≥–∞–º –∏ —á—Ç–µ–Ω–∏—é\n"
                "‚Ä¢ üí™ –ú–æ—Ç–∏–≤–∞—Ü–∏–µ–π –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ —á—Ç–µ–Ω–∏—è\n"
                "‚Ä¢ ‚ùì –í–∏–∫—Ç–æ—Ä–∏–Ω–∞–º–∏ –∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏ –ø–æ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–µ\n"
                "‚Ä¢ üîç –û—Ç–≤–µ—Ç–∞–º–∏ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –∫–Ω–∏–≥–∞—Ö\n\n"
                "üìù <i>–ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:</i>"
            ),
            reply_markup=get_ai_categories_kb(),
            parse_mode="HTML"
        )
    except Exception as e:
        await query.message.delete()
        new_msg = await query.message.answer(
            text=(
                "ü§ñ <b>Readify AI –ü–æ–º–æ—â–Ω–∏–∫</b>\n\n"
                "–Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —á—Ç–µ–Ω–∏—é! üéØ\n\n"
                "–ú–æ–≥—É –ø–æ–º–æ—á—å —Å:\n"
                "‚Ä¢ üìö –°–æ–≤–µ—Ç–∞–º–∏ –ø–æ –∫–Ω–∏–≥–∞–º –∏ —á—Ç–µ–Ω–∏—é\n"
                "‚Ä¢ üí™ –ú–æ—Ç–∏–≤–∞—Ü–∏–µ–π –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ —á—Ç–µ–Ω–∏—è\n"
                "‚Ä¢ ‚ùì –í–∏–∫—Ç–æ—Ä–∏–Ω–∞–º–∏ –∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏ –ø–æ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–µ\n"
                "‚Ä¢ üîç –û—Ç–≤–µ—Ç–∞–º–∏ –Ω–∞ –≤–æ–ø—Ä–æ—Å–∞–º–∏ –æ –∫–Ω–∏–≥–∞—Ö\n\n"
                "üìù <i>–ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:</i>"
            ),
            reply_mup=get_ai_categories_kb(),
            parse_mode="HTML"
        )
        await state.update_data(ai_message_id=new_msg.message_id)

    await state.set_state(AiAssistanceState.WaitingForQuestion)
    await query.answer()


@ai_help_private_router.callback_query(F.data == "ai_book_advice")
async def ai_book_advice_handler(query: types.CallbackQuery, state: FSMContext):
    """–°–æ–≤–µ—Ç—ã –ø–æ –∫–Ω–∏–≥–∞–º"""
    await state.update_data(ai_message_id=query.message.message_id)

    try:
        await query.message.edit_text(
            text=(
                "üìö <b>–°–æ–≤–µ—Ç—ã –ø–æ –∫–Ω–∏–≥–∞–º</b>\n\n"
                "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è—Ö –≤ —á—Ç–µ–Ω–∏–∏, –∏ —è –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥—É—é –∫–Ω–∏–≥–∏ –∏–ª–∏ –¥–∞–º —Å–æ–≤–µ—Ç—ã!\n\n"
                "–ü—Ä–∏–º–µ—Ä—ã:\n"
                "‚Ä¢ ¬´–ü–æ—Å–æ–≤–µ—Ç—É–π –∫–Ω–∏–≥–∏ –≤ –∂–∞–Ω—Ä–µ —Ñ—ç–Ω—Ç–µ–∑–∏¬ª\n"
                "‚Ä¢ ¬´–ö–∞–∫—É—é –∫–Ω–∏–≥—É –ø–æ—á–∏—Ç–∞—Ç—å –ø–æ—Å–ª–µ –ì–∞—Ä—Ä–∏ –ü–æ—Ç—Ç–µ—Ä–∞?¬ª\n"
                "‚Ä¢ ¬´–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å —Å –ø–æ–Ω–∏–º–∞–Ω–∏–µ–º –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–π –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã¬ª\n\n"
                "üìù <i>–û–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è:</i>"
            ),
            reply_markup=get_cancel_kb(),
            parse_mode="HTML"
        )
    except Exception as e:
        await query.message.delete()
        new_msg = await query.message.answer(
            text=(
                "üìö <b>–°–æ–≤–µ—Ç—ã –ø–æ –∫–Ω–∏–≥–∞–º</b>\n\n"
                "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è—Ö –≤ —á—Ç–µ–Ω–∏–∏, –∏ —è –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥—É—é –∫–Ω–∏–≥–∏ –∏–ª–∏ –¥–∞–º —Å–æ–≤–µ—Ç—ã!\n\n"
                "üìù <i>–û–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è:</i>"
            ),
            reply_markup=get_cancel_kb(),
            parse_mode="HTML"
        )
        await state.update_data(ai_message_id=new_msg.message_id)

    await state.set_state(AiAssistanceState.WaitingForQuestion)
    await query.answer()


@ai_help_private_router.callback_query(F.data == "ai_motivation")
async def ai_motivation_handler(query: types.CallbackQuery, state: FSMContext):
    """–ú–æ—Ç–∏–≤–∞—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è"""
    await state.update_data(ai_message_id=query.message.message_id)

    try:
        await query.message.edit_text(
            text=(
                "üí™ <b>–ú–æ—Ç–∏–≤–∞—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è</b>\n\n"
                "–ù—É–∂–Ω–∞ –º–æ—Ç–∏–≤–∞—Ü–∏—è —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —á–∏—Ç–∞—Ç—å? –Ø –ø–æ–º–æ–≥—É! üöÄ\n\n"
                "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏:\n"
                "‚Ä¢ ¬´–¢—Ä—É–¥–Ω–æ –Ω–∞–π—Ç–∏ –≤—Ä–µ–º—è –¥–ª—è —á—Ç–µ–Ω–∏—è¬ª\n"
                "‚Ä¢ ¬´–ü–æ—Ç–µ—Ä—è–ª –∏–Ω—Ç–µ—Ä–µ—Å –∫ –∫–Ω–∏–≥–∞–º¬ª\n"
                "‚Ä¢ ¬´–•–æ—á—É –≤—ã—Ä–∞–±–æ—Ç–∞—Ç—å –ø—Ä–∏–≤—ã—á–∫—É —á–∏—Ç–∞—Ç—å —Ä–µ–≥—É–ª—è—Ä–Ω–æ¬ª\n\n"
                "üìù <i>–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É —Å–∏—Ç—É–∞—Ü–∏—é:</i>"
            ),
            reply_markup=get_cancel_kb(),
            parse_mode="HTML"
        )
    except Exception as e:
        await query.message.delete()
        new_msg = await query.message.answer(
            text=(
                "üí™ <b>–ú–æ—Ç–∏–≤–∞—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è</b>\n\n"
                "–ù—É–∂–Ω–∞ –º–æ—Ç–∏–≤–∞—Ü–∏—è —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —á–∏—Ç–∞—Ç—å? –Ø –ø–æ–º–æ–≥—É! üöÄ\n\n"
                "üìù <i>–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É —Å–∏—Ç—É–∞—Ü–∏—é:</i>"
            ),
            reply_markup=get_cancel_kb(),
            parse_mode="HTML"
        )
        await state.update_data(ai_message_id=new_msg.message_id)

    await state.set_state(AiAssistanceState.WaitingForQuestion)
    await query.answer()


@ai_help_private_router.callback_query(F.data == "ai_quiz")
async def ai_quiz_handler(query: types.CallbackQuery, state: FSMContext):
    """–í–∏–∫—Ç–æ—Ä–∏–Ω—ã –ø–æ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–µ"""
    await state.update_data(ai_message_id=query.message.message_id)

    try:
        await query.message.edit_text(
            text=(
                "‚ùì <b>–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω–∞—è –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞</b>\n\n"
                "–î–∞–≤–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏–º –≤–∞—à–∏ –∑–Ω–∞–Ω–∏—è –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã! üìñ\n\n"
                "–í—ã –º–æ–∂–µ—Ç–µ:\n"
                "‚Ä¢ –ü–æ–ø—Ä–æ—Å–∏—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –ø–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º—É –∞–≤—Ç–æ—Ä—É –∏–ª–∏ –∂–∞–Ω—Ä—É\n"
                "‚Ä¢ –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –Ω–∞ –∑–Ω–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∏–∫–∏\n"
                "‚Ä¢ –ü–æ–ª—É—á–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–Ω–∏–≥–µ\n\n"
                "üìù <i>–û —á–µ–º —Ö–æ—Ç–∏—Ç–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É?</i>"
            ),
            reply_markup=get_cancel_kb(),
            parse_mode="HTML"
        )
    except Exception as e:
        await query.message.delete()
        new_msg = await query.message.answer(
            text=(
                "‚ùì <b>–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω–∞—è –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞</b>\n\n"
                "–î–∞–≤–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏–º –≤–∞—à–∏ –∑–Ω–∞–Ω–∏—è –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã! üìñ\n\n"
                "üìù <i>–û —á–µ–º —Ö–æ—Ç–∏—Ç–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É?</i>"
            ),
            reply_markup=get_cancel_kb(),
            parse_mode="HTML"
        )
        await state.update_data(ai_message_id=new_msg.message_id)

    await state.set_state(AiAssistanceState.WaitingForQuestion)
    await query.answer()


@ai_help_private_router.message(AiAssistanceState.WaitingForQuestion)
async def process_ai_help_request(message: types.Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    data = await state.get_data()
    ai_message_id = data.get('ai_message_id')

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await message.delete()

    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
        await bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=ai_message_id,
            text=(
                "ü§ñ <b>Readify AI –ü–æ–º–æ—â–Ω–∏–∫</b>\n\n"
                "‚è≥ <i>–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...</i>\n\n"
                f"üìù <b>–í–∞—à –≤–æ–ø—Ä–æ—Å:</b> {message.text[:100]}..."
            ),
            reply_markup=None,
            parse_mode="HTML"
        )

        # –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–∞ –∫–Ω–∏–≥–∞—Ö –∏ –º–æ—Ç–∏–≤–∞—Ü–∏–∏
        system_prompt = """–¢—ã - AI –ø–æ–º–æ—â–Ω–∏–∫ –≤ –±–æ—Ç–µ Readify, –∫–æ—Ç–æ—Ä—ã–π —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –Ω–∞ –∫–Ω–∏–≥–∞—Ö, —á—Ç–µ–Ω–∏–∏ –∏ –º–æ—Ç–∏–≤–∞—Ü–∏–∏. 

–¢–≤–æ—è —Ä–æ–ª—å:
1. –î–∞–≤–∞—Ç—å —Å–æ–≤–µ—Ç—ã –ø–æ –∫–Ω–∏–≥–∞–º –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —á—Ç–µ–Ω–∏—è
2. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –º–æ—Ç–∏–≤–∞—Ü–∏—é –∏ —Å–æ–≤–µ—Ç—ã –ø–æ —Ä–∞–∑–≤–∏—Ç–∏—é –ø—Ä–∏–≤—ã—á–∫–∏ —á—Ç–µ–Ω–∏—è
3. –°–æ–∑–¥–∞–≤–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –∏ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–µ
4. –ü–æ–º–æ–≥–∞—Ç—å —Å –≤—ã–±–æ—Ä–æ–º –∫–Ω–∏–≥ –∏ —Ä–µ—à–µ–Ω–∏–µ–º –ø—Ä–æ–±–ª–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å —á—Ç–µ–Ω–∏–µ–º

–û—Ç–≤–µ—á–∞–π –¥—Ä—É–∂–µ–ª—é–±–Ω–æ, –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–µ –∏ –ø–æ–ª–µ–∑–Ω–æ. –§–æ–∫—É—Å–∏—Ä—É–π—Å—è –Ω–∞ —Ç–µ–º–µ –∫–Ω–∏–≥ –∏ —á—Ç–µ–Ω–∏—è. 
–ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ —Å–≤—è–∑–∞–Ω —Å –∫–Ω–∏–≥–∞–º–∏, –≤–µ–∂–ª–∏–≤–æ –ø—Ä–µ–¥–ª–æ–∂–∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω–æ–π —Ç–µ–º–µ.

–ë—É–¥—å –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–º –≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞—Ö –∏ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–æ–≤–µ—Ç–∞—Ö!"""

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ GigaChat —Å —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º
        generated_response = sent_prompt_and_get_response(system_prompt, message.text)

        # –û–±—Ä–µ–∑–∞–µ–º –æ—Ç–≤–µ—Ç –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
        if len(generated_response) > 3000:
            generated_response = generated_response[:3000] + "...\n\n‚ö†Ô∏è <i>–û—Ç–≤–µ—Ç —Å–æ–∫—Ä–∞—â–µ–Ω</i>"

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ç–≤–µ—Ç–æ–º
        await bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=ai_message_id,
            text=(
                "ü§ñ <b>Readify AI –ü–æ–º–æ—â–Ω–∏–∫</b>\n\n"
                f"üìù <b>–í–∞—à –≤–æ–ø—Ä–æ—Å:</b> {message.text}\n\n"
                f"üí° <b>–û—Ç–≤–µ—Ç:</b>\n{generated_response}"
            ),
            reply_markup=get_ai_help_kb(),
            parse_mode="HTML"
        )

    except Exception as e:
        try:
            await bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=ai_message_id,
                text=(
                    "ü§ñ <b>Readify AI –ü–æ–º–æ—â–Ω–∏–∫</b>\n\n"
                    "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</b>\n\n"
                    "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                ),
                reply_markup=get_ai_help_kb(),
                parse_mode="HTML"
            )
        except Exception:
            pass
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ AI –∑–∞–ø—Ä–æ—Å–∞: {e}")

    await state.clear()


@ai_help_private_router.callback_query(F.data == "cancel_ai_help")
async def cancel_ai_help(query: types.CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ AI –ø–æ–º–æ—â–∏"""
    await state.clear()

    try:
        await query.message.edit_text(
            text="‚ùå <b>AI –ø–æ–º–æ—â—å –æ—Ç–º–µ–Ω–µ–Ω–∞</b>",
            reply_markup=get_ai_categories_kb(),
            parse_mode="HTML"
        )
    except Exception as e:
        await query.message.delete()
        await query.message.answer(
            text="‚ùå <b>AI –ø–æ–º–æ—â—å –æ—Ç–º–µ–Ω–µ–Ω–∞</b>",
            reply_markup=get_ai_categories_kb(),
            parse_mode="HTML"
        )

    await query.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /ai
@ai_help_private_router.message(F.text == "/ai")
async def ai_command_handler(message: types.Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /ai"""
    await message.delete()

    start_msg = await message.answer(
        text=(
            "ü§ñ <b>Readify AI –ü–æ–º–æ—â–Ω–∏–∫</b>\n\n"
            "–Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —á—Ç–µ–Ω–∏—é! üéØ\n\n"
            "–ú–æ–≥—É –ø–æ–º–æ—á—å —Å:\n"
            "‚Ä¢ üìö –°–æ–≤–µ—Ç–∞–º–∏ –ø–æ –∫–Ω–∏–≥–∞–º –∏ —á—Ç–µ–Ω–∏—é\n"
            "‚Ä¢ üí™ –ú–æ—Ç–∏–≤–∞—Ü–∏–µ–π –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ —á—Ç–µ–Ω–∏—è\n"
            "‚Ä¢ ‚ùì –í–∏–∫—Ç–æ—Ä–∏–Ω–∞–º–∏ –∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏ –ø–æ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–µ\n"
            "‚Ä¢ üîç –û—Ç–≤–µ—Ç–∞–º–∏ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –∫–Ω–∏–≥–∞—Ö\n\n"
            "üìù <i>–ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:</i>"
        ),
        reply_markup=get_ai_categories_kb(),
        parse_mode="HTML"
    )

    await state.update_data(ai_message_id=start_msg.message_id)
    await state.set_state(AiAssistanceState.WaitingForQuestion)