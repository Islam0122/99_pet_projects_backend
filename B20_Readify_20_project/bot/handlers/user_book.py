from aiogram import Router, types, F, Bot
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from api.books import fetch_user_books, delete_user_book, read_user_book
from api.telegramusers import get_telegram_user
import logging

user_books_router = Router()
logger = logging.getLogger(__name__)
photo = "AgACAgIAAxkBAAIBXmjyji-cVZO1zhue4OhyMYaTX9UtAAIL-DEbw-l5S3ATNiEmk1T9AQADAgADeQADNgQ"


def get_user_books_kb():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üìñ –ú–æ–∏ –∫–Ω–∏–≥–∏", callback_data="users_books")],
            [InlineKeyboardButton(text="üì§ –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–∏–≥—É", callback_data="add_my_books")],
            [InlineKeyboardButton(text="‚è™ –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ]
    )


def get_book_actions_kb(book_id: int):
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üìñ –ß–∏—Ç–∞—Ç—å", callback_data=f"read_book_{book_id}")],
            [InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_book_{book_id}")],
            [InlineKeyboardButton(text="‚è™ –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="users_books")]
        ]
    )


def get_books_pagination_kb(books, page=0, books_per_page=5):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–Ω–∏–≥"""
    start_idx = page * books_per_page
    end_idx = start_idx + books_per_page
    current_books = books[start_idx:end_idx]

    keyboard = []

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–Ω–∏–≥–∏
    for book in current_books:
        keyboard.append([
            InlineKeyboardButton(
                text=f"üìò {book['title'][:30]}",
                callback_data=f"book_detail_{book['id']}"
            )
        ])

    # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    pagination_buttons = []

    if page > 0:
        pagination_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"books_page_{page - 1}"))

    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    total_pages = (len(books) + books_per_page - 1) // books_per_page
    if total_pages > 1:
        pagination_buttons.append(InlineKeyboardButton(
            text=f"{page + 1}/{total_pages}",
            callback_data="current_page"
        ))

    if end_idx < len(books):
        pagination_buttons.append(InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"books_page_{page + 1}"))

    if pagination_buttons:
        keyboard.append(pagination_buttons)

    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    keyboard.extend([
        [InlineKeyboardButton(text="üì§ –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–∏–≥—É", callback_data="add_my_books")],
        [InlineKeyboardButton(text="‚è™ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])

    return InlineKeyboardMarkup(inline_keyboard=keyboard)


@user_books_router.callback_query(F.data == "users_books")
async def show_user_books(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–Ω–∏–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await state.clear()

    try:
        user_data = await get_telegram_user(callback.from_user.id)
        telegram_user_id = user_data['id']

        all_books = await fetch_user_books()

        user_books = [
            book for book in all_books
            if book.get('telegram_user') == telegram_user_id
        ]

        if not user_books:
            await callback.message.edit_caption(
                caption=(
                    "üìñ <b>–ú–æ–∏ –∫–Ω–∏–≥–∏</b>\n\n"
                    "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–Ω–∏–≥.\n\n"
                    "–ù–∞–∂–º–∏—Ç–µ 'üì§ –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–∏–≥—É' —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–æ—é –ø–µ—Ä–≤—É—é –∫–Ω–∏–≥—É!"
                ),
                reply_markup=get_user_books_kb(),
                parse_mode="HTML"
            )
        else:
            await state.update_data(all_user_books=user_books, current_page=0)
            await show_books_page(callback, state, bot)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–Ω–∏–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        await callback.message.edit_caption(
            caption=(
                "‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n"
                "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∞—à–∏ –∫–Ω–∏–≥–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            ),
            reply_markup=get_user_books_kb(),
            parse_mode="HTML"
        )

    await callback.answer()


@user_books_router.callback_query(F.data.startswith("book_detail_"))
async def show_book_detail(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∫–Ω–∏–≥–∏"""
    book_id = int(callback.data.split("_")[2])

    try:
        all_books = await fetch_user_books()
        book = next((b for b in all_books if b['id'] == book_id), None)

        if not book:
            await callback.answer("‚ùå –ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return

        book_text = (
            f"üìò <b>{book['title']}</b>\n\n"
            f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n{book['description']}\n\n"
            f"üìÖ <b>–î–æ–±–∞–≤–ª–µ–Ω–∞:</b> {book['created_at'][:10]}\n"
            f"üÜî <b>ID:</b> {book['id']}"
        )
        try:
            await callback.message.edit_caption(
            caption=book_text,
            reply_markup=get_book_actions_kb(book_id),
            parse_mode="HTML"
            )
        except Exception as e:
            await callback.message.delete()
            await callback.message.answer_photo(
                photo=photo,
                caption=book_text,
                reply_markup=get_book_actions_kb(book_id),
                parse_mode="HTML"
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –¥–µ—Ç–∞–ª–µ–π –∫–Ω–∏–≥–∏: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–Ω–∏–≥–∏")

    await callback.answer()


@user_books_router.callback_query(F.data.startswith("delete_book_"))
async def delete_book_handler(callback: types.CallbackQuery, state: FSMContext):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∫–Ω–∏–≥–∏"""
    book_id = int(callback.data.split("_")[2])
    try:
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
        confirmation_kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_{book_id}")],
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"book_detail_{book_id}")]
            ]
        )

        await callback.message.edit_caption(
            caption="‚ö†Ô∏è <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è</b>\n\n–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∫–Ω–∏–≥—É?",
            reply_markup=confirmation_kb,
            parse_mode="HTML"
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞")

    await callback.answer()


@user_books_router.callback_query(F.data.startswith("confirm_delete_"))
async def confirm_delete_book(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∫–Ω–∏–≥–∏"""
    book_id = int(callback.data.split("_")[2])
    try:
        await callback.message.edit_caption(
            caption="‚è≥ <b>–£–¥–∞–ª—è—é –∫–Ω–∏–≥—É...</b>",
            reply_markup=None,
            parse_mode="HTML"
        )

        success = await delete_user_book(book_id)

        if success:
            await callback.message.edit_caption(
                caption="‚úÖ <b>–ö–Ω–∏–≥–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!</b>",
                reply_markup=InlineKeyboardMarkup(
                    inline_keyboard=[
                        [InlineKeyboardButton(text="üìñ –ú–æ–∏ –∫–Ω–∏–≥–∏", callback_data="users_books")],
                        [InlineKeyboardButton(text="‚è™ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                    ]
                ),
                parse_mode="HTML"
            )
        else:
            await callback.message.edit_caption(
                caption="‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–Ω–∏–≥—É.",
                reply_markup=InlineKeyboardMarkup(
                    inline_keyboard=[
                        [InlineKeyboardButton(text="üìñ –ú–æ–∏ –∫–Ω–∏–≥–∏", callback_data="users_books")],
                        [InlineKeyboardButton(text="‚è™ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                    ]
                ),
                parse_mode="HTML"
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–Ω–∏–≥–∏: {e}")
        await callback.message.edit_caption(
            caption="‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–Ω–∏–≥—É.",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="üìñ –ú–æ–∏ –∫–Ω–∏–≥–∏", callback_data="users_books")],
                    [InlineKeyboardButton(text="‚è™ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                ]
            ),
            parse_mode="HTML"
        )

    await callback.answer()


def get_reading_pagination_kb(book_id: int, current_page: int, total_pages: int):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∫–Ω–∏–≥–∏"""
    keyboard = []

    # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    pagination_buttons = []

    if current_page > 0:
        pagination_buttons.append(
            InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"read_page_{book_id}_{current_page - 1}"))

    pagination_buttons.append(InlineKeyboardButton(
        text=f"{current_page + 1}/{total_pages}",
        callback_data="current_reading_page"
    ))

    if current_page < total_pages - 1:
        pagination_buttons.append(
            InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"read_page_{book_id}_{current_page + 1}"))

    keyboard.append(pagination_buttons)

    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    keyboard.extend([
        [InlineKeyboardButton(text="üìñ –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ", callback_data=f"book_detail_{book_id}")],
        [InlineKeyboardButton(text="‚è™ –ö —Å–ø–∏—Å–∫—É –∫–Ω–∏–≥", callback_data="users_books")]
    ])

    return InlineKeyboardMarkup(inline_keyboard=keyboard)


async def show_books_page(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –∫–Ω–∏–≥–∞–º–∏"""
    data = await state.get_data()
    user_books = data.get('all_user_books', [])
    current_page = data.get('current_page', 0)
    books_per_page = 5

    total_pages = (len(user_books) + books_per_page - 1) // books_per_page

    # –ó–∞—â–∏—Ç–∞ –æ—Ç –≤—ã—Ö–æ–¥–∞ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã
    if current_page >= total_pages:
        current_page = total_pages - 1
    if current_page < 0:
        current_page = 0

    await state.update_data(current_page=current_page)

    start_idx = current_page * books_per_page
    end_idx = start_idx + books_per_page
    current_books = user_books[start_idx:end_idx]

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
    books_text = f"üìñ <b>–ú–æ–∏ –∫–Ω–∏–≥–∏</b> (—Å—Ç—Ä. {current_page + 1}/{total_pages})\n\n"

    if not current_books:
        books_text += "üì≠ –ù–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –Ω–µ—Ç –∫–Ω–∏–≥."
    else:
        pass
        # for i, book in enumerate(current_books, start_idx + 1):
            # books_text += f"{i}. <b>{book['title']}</b>\n"
            # if book.get('description'):
            #     books_text += f"   üìù {book['description'][:50]}...\n"
            # books_text += f"   üìÖ {book['created_at'][:10]}\n\n"

    books_text += f"üìö –í—Å–µ–≥–æ –∫–Ω–∏–≥: {len(user_books)}"

    try:
        await callback.message.edit_caption(
            caption=books_text,
            reply_markup=get_books_pagination_kb(user_books, current_page, books_per_page),
            parse_mode="HTML"
        )
    except Exception as e:
        await callback.message.delete()
        await callback.message.answer_photo(
            photo=photo,
            caption=books_text,
            reply_markup=get_books_pagination_kb(user_books, current_page, books_per_page),
            parse_mode="HTML"
        )


@user_books_router.callback_query(F.data.startswith("books_page_"))
async def handle_books_pagination(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∫–Ω–∏–≥"""
    page = int(callback.data.split("_")[2])
    await state.update_data(current_page=page)
    await show_books_page(callback, state, bot)
    await callback.answer()


@user_books_router.callback_query(F.data == "current_page")
async def handle_current_page(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –Ω–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
    await callback.answer("üìÑ –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞")


@user_books_router.callback_query(F.data.startswith("read_book_"))
async def read_book_handler(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    """–ß—Ç–µ–Ω–∏–µ –∫–Ω–∏–≥–∏ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    book_id = int(callback.data.split("_")[2])

    try:
        await callback.message.edit_caption(
            caption="‚è≥ <b>–ó–∞–≥—Ä—É–∂–∞—é –∫–Ω–∏–≥—É...</b>",
            reply_markup=None,
            parse_mode="HTML"
        )

        book_content = await read_user_book(book_id)

        if not book_content:
            await callback.message.edit_caption(
                caption="‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–Ω–∏–≥—É.",
                reply_markup=get_book_actions_kb(book_id),
                parse_mode="HTML"
            )
            return

        content = book_content.get('content', '')
        title = book_content.get('title', '–ö–Ω–∏–≥–∞')

        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        MAX_PAGE_LENGTH = 3000  # —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
        pages = []
        current_page = ""

        for line in content.split('\n'):
            if len(current_page + line + '\n') <= MAX_PAGE_LENGTH:
                current_page += line + '\n'
            else:
                if current_page:
                    pages.append(current_page.strip())
                current_page = line + '\n'

        if current_page:
            pages.append(current_page.strip())

        if not pages:
            pages = [content]

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–Ω–∏–≥–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data({
            'book_pages': pages,
            'current_reading_page': 0,
            'reading_book_id': book_id,
            'reading_book_title': title
        })

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        await show_reading_page(callback, state, bot)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∫–Ω–∏–≥–∏: {e}")
        await callback.message.edit_caption(
            caption="‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–Ω–∏–≥—É.",
            reply_markup=get_book_actions_kb(book_id),
            parse_mode="HTML"
        )

    await callback.answer()


async def show_reading_page(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–Ω–∏–≥–∏"""
    data = await state.get_data()
    pages = data.get('book_pages', [])
    current_page = data.get('current_reading_page', 0)
    book_id = data.get('reading_book_id')
    title = data.get('reading_book_title', '–ö–Ω–∏–≥–∞')

    if not pages or current_page >= len(pages):
        await callback.message.edit_caption(
            caption="‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
            reply_markup=get_book_actions_kb(book_id),
            parse_mode="HTML"
        )
        return

    page_content = pages[current_page]

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
    text = f"üìñ <b>{title}</b>\n\n{page_content}\n\nüìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page + 1}/{len(pages)}"
    await callback.message.delete()
    await callback.message.answer(
        text=text,
        reply_markup=get_reading_pagination_kb(book_id, current_page, len(pages)),
        parse_mode="HTML"
    )


@user_books_router.callback_query(F.data.startswith("read_page_"))
async def handle_reading_pagination(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∫–Ω–∏–≥–∏"""
    try:
        _, _, book_id, page = callback.data.split("_")
        book_id = int(book_id)
        page = int(page)

        await state.update_data(current_reading_page=page)
        await show_reading_page(callback, state, bot)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã")

    await callback.answer()


@user_books_router.callback_query(F.data == "current_reading_page")
async def handle_current_reading_page(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –Ω–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã —á—Ç–µ–Ω–∏—è"""
    await callback.answer("üìÑ –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞")

