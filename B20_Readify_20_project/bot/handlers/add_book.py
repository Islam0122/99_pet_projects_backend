from aiogram import Router, types, F, Bot
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from api.books import create_user_book
from api.telegramusers import get_telegram_user
from keyboards.inline_keyboards import return_menu_kb
import os
import logging

add_book_router = Router()
logger = logging.getLogger(__name__)


class AddBookStates(StatesGroup):
    waiting_for_title = State()
    waiting_for_description = State()
    waiting_for_file = State()


def get_cancel_kb():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]
        ]
    )


@add_book_router.callback_query(F.data == "add_my_books")
async def add_my_book_start(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await state.update_data(bot_message_id=callback.message.message_id)

    await callback.message.edit_caption(
        caption=(
            "üìò <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–∏–≥–∏</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏:"
        ),
        reply_markup=get_cancel_kb(),
        parse_mode="HTML"
    )
    await state.set_state(AddBookStates.waiting_for_title)
    await callback.answer()


@add_book_router.message(AddBookStates.waiting_for_title)
async def add_book_title(message: types.Message, state: FSMContext, bot: Bot):
    title = message.text.strip()

    if not title:
        await message.answer("‚ùó –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏:")
        return

    if len(title) > 200:
        await message.answer("‚ùó –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 200 —Å–∏–º–≤–æ–ª–æ–≤. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–Ω–æ–≤–∞:")
        return

    await state.update_data(title=title)

    data = await state.get_data()
    bot_message_id = data.get('bot_message_id')

    await message.delete()

    await bot.edit_message_caption(
        chat_id=message.chat.id,
        message_id=bot_message_id,
        caption=(
            "üìò <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–∏–≥–∏</b>\n\n"
            f"‚úÖ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {title}\n"
            "üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–Ω–∏–≥–∏:"
        ),
        reply_markup=get_cancel_kb(),
        parse_mode="HTML"
    )
    await state.set_state(AddBookStates.waiting_for_description)


@add_book_router.message(AddBookStates.waiting_for_description)
async def add_book_description(message: types.Message, state: FSMContext, bot: Bot):
    description = message.text.strip()

    if not description:
        await message.answer("‚ùó –û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–Ω–∏–≥–∏:")
        return

    if len(description) > 1000:
        await message.answer("‚ùó –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 1000 —Å–∏–º–≤–æ–ª–æ–≤. –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–Ω–æ–≤–∞:")
        return

    await state.update_data(description=description)

    data = await state.get_data()
    title = data.get("title")
    bot_message_id = data.get('bot_message_id')

    await message.delete()

    await bot.edit_message_caption(
        chat_id=message.chat.id,
        message_id=bot_message_id,
        caption=(
            "üìò <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–∏–≥–∏</b>\n\n"
            f"‚úÖ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {title}\n"
            f"‚úÖ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {description[:100]}...\n\n"
            "üìÑ –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª –∫–Ω–∏–≥–∏ (—Ç–æ–ª—å–∫–æ .txt):"
        ),
        reply_markup=get_cancel_kb(),
        parse_mode="HTML"
    )
    await state.set_state(AddBookStates.waiting_for_file)


@add_book_router.message(AddBookStates.waiting_for_file)
async def add_book_file(message: types.Message, state: FSMContext, bot: Bot):
    if not message.document:
        await message.answer("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª .txt")
        return

    if not message.document.file_name.lower().endswith(".txt"):
        await message.answer("‚ùó –¢–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã .txt –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è")
        return

    if message.document.file_size > 10 * 1024 * 1024:
        await message.answer("‚ùó –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º—É–º 10MB")
        return

    if message.document.file_size == 0:
        await message.answer("‚ùó –§–∞–π–ª –ø—É—Å—Ç–æ–π. –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º.")
        return

    data = await state.get_data()
    title = data.get("title")
    description = data.get("description")
    bot_message_id = data.get('bot_message_id')

    await message.delete()

    await bot.edit_message_caption(
        chat_id=message.chat.id,
        message_id=bot_message_id,
        caption=(
            "üìò <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–∏–≥–∏</b>\n\n"
            f"‚úÖ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {title}\n"
            f"‚úÖ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {description[:100]}...\n"
            f"‚úÖ <b>–§–∞–π–ª:</b> {message.document.file_name}\n\n"
            "‚è≥ <i>–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–∞–π–ª...</i>"
        ),
        reply_markup=None,
        parse_mode="HTML"
    )

    os.makedirs("temp_uploads", exist_ok=True)
    unique_filename = f"{message.from_user.id}_{message.message_id}.txt"
    temp_file_path = f"temp_uploads/{unique_filename}"

    try:
        await bot.download(message.document, destination=temp_file_path)

        if not os.path.exists(temp_file_path) or os.path.getsize(temp_file_path) == 0:
            raise Exception("–§–∞–π–ª –Ω–µ –±—ã–ª —Å–∫–∞—á–∞–Ω –∏–ª–∏ –ø—É—Å—Ç–æ–π")

        file_size = os.path.getsize(temp_file_path)
        logger.info(f"–§–∞–π–ª —Å–∫–∞—á–∞–Ω: {message.document.file_name}, —Ä–∞–∑–º–µ—Ä: {file_size} –±–∞–π—Ç")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
        if os.path.exists(temp_file_path):
            os.remove(temp_file_path)

        await bot.edit_message_caption(
            chat_id=message.chat.id,
            message_id=bot_message_id,
            caption=(
                "üìò <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–∏–≥–∏</b>\n\n"
                f"‚úÖ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {title}\n"
                f"‚úÖ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {description[:100]}...\n\n"
                "‚ùå <b>–û—à–∏–±–∫–∞:</b> –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª"
            ),
            reply_markup=get_cancel_kb(),
            parse_mode="HTML"
        )
        return

    try:
        user_data = await get_telegram_user(message.from_user.id)
        telegram_user_id = user_data['id']
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        if os.path.exists(temp_file_path):
            os.remove(temp_file_path)

        await bot.edit_message_caption(
            chat_id=message.chat.id,
            message_id=bot_message_id,
            caption=(
                "üìò <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–∏–≥–∏</b>\n\n"
                f"‚úÖ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {title}\n"
                f"‚úÖ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {description[:100]}...\n\n"
                "‚ùå <b>–û—à–∏–±–∫–∞:</b> –ü—Ä–æ–±–ª–µ–º–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
            ),
            reply_markup=return_menu_kb(),
            parse_mode="HTML"
        )
        await state.clear()
        return

    try:
        with open(temp_file_path, 'rb') as file:
            result = await create_user_book(
                title=title,
                description=description,
                telegram_user_id=telegram_user_id,
                file=file,
                file_name=message.document.file_name
            )

        if result:
            await bot.edit_message_caption(
                chat_id=message.chat.id,
                message_id=bot_message_id,
                caption=(
                    "üìò <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–∏–≥–∏</b>\n\n"
                    f"‚úÖ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {title}\n"
                    f"‚úÖ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {description[:100]}...\n"
                    f"‚úÖ <b>–§–∞–π–ª:</b> {message.document.file_name}\n\n"
                    "üéâ <b>–ö–Ω–∏–≥–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!</b>"
                ),
                reply_markup=return_menu_kb(),
                parse_mode="HTML"
            )
            logger.info(f"–ö–Ω–∏–≥–∞ '{title}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.id}")
        else:
            await bot.edit_message_caption(
                chat_id=message.chat.id,
                message_id=bot_message_id,
                caption=(
                    "üìò <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–∏–≥–∏</b>\n\n"
                    f"‚úÖ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {title}\n"
                    f"‚úÖ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {description[:100]}...\n\n"
                    "‚ùå <b>–û—à–∏–±–∫–∞:</b> –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–Ω–∏–≥—É"
                ),
                reply_markup=get_cancel_kb(),
                parse_mode="HTML"
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–Ω–∏–≥–∏: {e}")
        await bot.edit_message_caption(
            chat_id=message.chat.id,
            message_id=bot_message_id,
            caption=(
                "üìò <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–∏–≥–∏</b>\n\n"
                f"‚úÖ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {title}\n"
                f"‚úÖ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {description[:100]}...\n\n"
                "‚ùå <b>–û—à–∏–±–∫–∞:</b> –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"
            ),
            reply_markup=get_cancel_kb(),
            parse_mode="HTML"
        )

    finally:
        if os.path.exists(temp_file_path):
            os.remove(temp_file_path)
        await state.clear()


@add_book_router.callback_query(F.data == "cancel")
async def cancel_add_book(callback: types.CallbackQuery, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return

    await state.clear()
    await callback.message.edit_caption(
        caption="‚ùå <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–∏–≥–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ</b>",
        reply_markup=return_menu_kb(),
        parse_mode="HTML"
    )
    await callback.answer()