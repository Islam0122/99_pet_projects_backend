from aiogram import Router, types, F
from api.telegramusers import get_telegram_user, get_top_users
from aiogram.filters import Command
from keyboards.inline_keyboards import return_menu_kb
from datetime import datetime
from pathlib import Path

profile_router = Router()
photo = "AgACAgIAAxkBAAIBXmjyji-cVZO1zhue4OhyMYaTX9UtAAIL-DEbw-l5S3ATNiEmk1T9AQADAgADeQADNgQ"

def format_date(date_str):
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –¥–∞—Ç—É –∏–∑ API –≤ –∫—Ä–∞—Å–∏–≤—ã–π —Ñ–æ—Ä–º–∞—Ç"""
    if not date_str:
        return "‚Äî"
    try:
        dt = datetime.fromisoformat(date_str)
        return dt.strftime("%d.%m.%Y, %H:%M")
    except:
        return date_str  # –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å


# ------------------ –ö–æ–º–∞–Ω–¥–∞ /profile ------------------
@profile_router.message(Command("profile"))
async def show_profile(message: types.Message):
    user_data = await get_telegram_user(message.from_user.id)
    if not user_data:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    username = user_data.get("username") or message.from_user.username or message.from_user.id
    streak_days = user_data.get("streak_days", 0)
    streak_status = user_data.get("streak_status", "–ù–µ –Ω–∞—á–∏–Ω–∞–ª streak üå±")
    total_read_books = user_data.get("total_read_books", 0)
    xp = user_data.get("xp", 0)
    level = user_data.get("level", 1)
    rank = user_data.get("rank", "–ù–æ–≤–∏—á–æ–∫")
    last_read_date = format_date(user_data.get("last_read_date"))
    last_active = format_date(user_data.get("last_active"))
    member_since = format_date(user_data.get("member_since"))

    text = (
        f"üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å @{username}</b>\n\n"
        f"üî• <b>Streak:</b> {streak_status} ({streak_days} –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥)\n"
        f"üìö <b>–ü—Ä–æ—á–∏—Ç–∞–Ω–æ –∫–Ω–∏–≥:</b> {total_read_books}\n\n"
        f"‚ö° <b>–û–ø—ã—Ç (XP):</b> {xp}\n"
        f"üèÖ <b>–£—Ä–æ–≤–µ–Ω—å:</b> {level}\n"
        f"üéñ <b>–ó–≤–∞–Ω–∏–µ:</b> {rank}\n\n"
        f"üìñ <b>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –ø—Ä–æ—á—Ç–µ–Ω–∏–µ:</b> {last_read_date}\n"
        f"üïì <b>–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b> {last_active}\n"
        f"üìå <b>–í —Å–∏—Å—Ç–µ–º–µ —Å:</b> {member_since}"
    )

    await message.answer_photo(photo=photo,caption=text, reply_markup=return_menu_kb(), parse_mode="HTML")


# ------------------ –ö–Ω–æ–ø–∫–∞ –ü—Ä–æ—Ñ–∏–ª—å ------------------
@profile_router.callback_query(F.data == "profile")
async def show_profile_callback(callback: types.CallbackQuery):
    user_data = await get_telegram_user(callback.from_user.id)

    if not user_data:
        await callback.message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    username = user_data.get("username") or callback.from_user.username or callback.from_user.id
    streak_days = user_data.get("streak_days", 0)
    streak_status = user_data.get("streak_status", "–ù–µ –Ω–∞—á–∏–Ω–∞–ª streak üå±")
    total_read_books = user_data.get("total_read_books", 0)
    xp = user_data.get("xp", 0)
    level = user_data.get("level", 1)
    rank = user_data.get("rank", "–ù–æ–≤–∏—á–æ–∫")
    last_read_date = format_date(user_data.get("last_read_date"))
    last_active = format_date(user_data.get("last_active"))
    member_since = format_date(user_data.get("member_since"))
    text = (
        f"üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å @{username}</b>\n\n"
        f"üî• <b>Streak:</b> {streak_status} ({streak_days} –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥)\n"
        f"üìö <b>–ü—Ä–æ—á–∏—Ç–∞–Ω–æ –∫–Ω–∏–≥:</b> {total_read_books}\n\n"
        f"‚ö° <b>–û–ø—ã—Ç (XP):</b> {xp}\n"
        f"üèÖ <b>–£—Ä–æ–≤–µ–Ω—å:</b> {level}\n"
        f"üéñ <b>–ó–≤–∞–Ω–∏–µ:</b> {rank}\n\n"
        f"üìñ <b>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –ø—Ä–æ—á—Ç–µ–Ω–∏–µ:</b> {last_read_date}\n"
        f"üïì <b>–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b> {last_active}\n"
        f"üìå <b>–í —Å–∏—Å—Ç–µ–º–µ —Å:</b> {member_since}"
    )

    await callback.message.edit_caption(caption=text, reply_markup=return_menu_kb(), parse_mode="HTML")
    await callback.answer()


@profile_router.callback_query(F.data == "top_xp")
async def top_xp(callback: types.CallbackQuery):
    try:
        users = await get_top_users(limit=10)
        if not users:
            await callback.message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ç–æ–ø–µ üò¢")
            return

        text = "üèÜ –¢–æ–ø-10 —á–∏—Ç–∞—Ç–µ–ª–µ–π Readify:\n\n"
        for i, user in enumerate(users, start=1):
            text += (
                f"{i}. {user.get('username') or user.get('telegram_id')}\n"
                f"   –£—Ä–æ–≤–µ–Ω—å: {user.get('level')}, {user.get('rank')}\n"
                f"   XP: {user.get('xp')}, –°—Ç—Ä–∏–∫: {user.get('streak_status')}\n"
                f"   –° –Ω–∞–º–∏ —Å: {user.get('member_since')}\n\n"
            )

        await callback.message.edit_caption(caption=text, reply_markup=return_menu_kb())
    except Exception as e:
        await callback.message.answer(text=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–ø–∞ !!")