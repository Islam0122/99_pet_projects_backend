import aiohttp
import logging
from config.config import load_config
from typing import Optional, Dict, List,BinaryIO
import aiohttp

logger = logging.getLogger(__name__)
config = load_config()
API_URL = f"{config.api_url.api_url}"  # –±–∞–∑–æ–≤—ã–π URL API


async def fetch_books() -> list:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∫–Ω–∏–≥"""
    url = f"{API_URL}/books/"
    async with aiohttp.ClientSession() as session:
        try:
            async with session.get(url) as resp:
                resp.raise_for_status()
                return await resp.json()
        except aiohttp.ClientError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–Ω–∏–≥: {e}")
            return []


async def fetch_chapter(book_id: int, chapter_number: int) -> dict:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≥–ª–∞–≤—ã"""
    url = f"{API_URL}/books/{book_id}/chapters/{chapter_number}/"
    async with aiohttp.ClientSession() as session:
        try:
            async with session.get(url) as resp:
                resp.raise_for_status()
                return await resp.json()
        except aiohttp.ClientError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥–ª–∞–≤—ã {chapter_number} –∫–Ω–∏–≥–∏ {book_id}: {e}")
            return {}


async def load_book(olid: str) -> dict:
    """–ê–≤—Ç–æ-–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–∏–≥–∏ —á–µ—Ä–µ–∑ OLID"""
    url = f"{API_URL}/books/load/"
    payload = {"olid": olid}
    async with aiohttp.ClientSession() as session:
        try:
            async with session.post(url, json=payload) as resp:
                resp.raise_for_status()
                return await resp.json()
        except aiohttp.ClientError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–Ω–∏–≥–∏ OLID={olid}: {e}")
            return {}


async def fetch_user_books() -> List[Dict]:
    """üìö –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–Ω–∏–≥"""
    url = f"{API_URL}/user-books/"
    async with aiohttp.ClientSession() as session:
        try:
            async with session.get(url) as resp:
                resp.raise_for_status()
                return await resp.json()
        except aiohttp.ClientError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–Ω–∏–≥: {e}")
            return []


async def create_user_book(
        title: str,
        description: str,
        telegram_user_id: int,
        file: BinaryIO,
        file_name: str
) -> bool:
    try:
        data = aiohttp.FormData()
        data.add_field('title', title)
        data.add_field('description', description)
        data.add_field('telegram_user', str(telegram_user_id))
        data.add_field('file', file, filename=file_name)

        async with aiohttp.ClientSession() as session:
            url = f"{API_URL}/user-books/"
            async with session.post(
                    url,
                    data=data
            ) as response:

                if response.status == 201:
                    return True
                else:
                    logger.error(f"API error: {response.status} - {await response.text()}")
                    return False

    except Exception as e:
        logger.error(f"Error creating user book: {e}")
        return False


async def delete_user_book(book_id: int) -> bool:
    """üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∫–Ω–∏–≥–∏"""
    url = f"{API_URL}/user-books/{book_id}/"
    async with aiohttp.ClientSession() as session:
        try:
            async with session.delete(url) as resp:
                if resp.status == 204:
                    logger.info(f"–ö–Ω–∏–≥–∞ —Å ID={book_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.")
                    return True
                else:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–Ω–∏–≥—É ID={book_id}. –ö–æ–¥: {resp.status}")
                    return False
        except aiohttp.ClientError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–Ω–∏–≥–∏ ID={book_id}: {e}")
            return False


async def read_user_book(book_id: int) -> Optional[Dict]:
    """üìñ –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∫–Ω–∏–≥–∏ —Å –Ω—É–º–µ—Ä–∞—Ü–∏–µ–π —Å—Ç—Ä–æ–∫"""
    url = f"{API_URL}/user-books/{book_id}/read_file/"
    async with aiohttp.ClientSession() as session:
        try:
            async with session.get(url) as resp:
                resp.raise_for_status()
                return await resp.json()
        except aiohttp.ClientError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –∫–Ω–∏–≥–∏ ID={book_id}: {e}")
            return None

